#cloud-config
# Buildkite CI Agent Bootstrap Script
#
# BEFORE USING:
# 1. Generate SSH key: ssh-keygen -t ed25519 -f ~/.ssh/buildkite_deploy_key
# 2. Encode private key: base64 -w 0 ~/.ssh/buildkite_deploy_key (Linux) or base64 -i ~/.ssh/buildkite_deploy_key (macOS)
# 3. Replace SSH_KEY_BASE64 below with the base64 output
# 4. Add public key (~/.ssh/buildkite_deploy_key.pub) to GitHub repo as Deploy Key
# 5. Replace BUILDKITE_AGENT_TOKEN below with your actual token
#
package_update: true
packages:
  - overlayroot
  - curl
  - ca-certificates
  - gpg
  - dbus
  - jq
  - yq
  - git
  - git-lfs
  - git-filter-repo
  - pciutils
  - openssl

write_files:
  - path: /etc/overlayroot.local.conf
    permissions: "0644"
    owner: root:root
    content: |
      overlayroot="tmpfs"

  - path: /etc/systemd/system/buildkite-bootstrap.service
    permissions: "0644"
    owner: root:root
    content: |
      [Unit]
      Description=Buildkite Agent Bootstrap (runs once after overlayroot is active)
      After=network-online.target
      Wants=network-online.target
      ConditionPathExists=!/var/lib/buildkite-bootstrap-complete

      [Service]
      Type=oneshot
      ExecStart=/usr/local/sbin/bootstrap-ci.sh
      ExecStartPost=/usr/bin/touch /var/lib/buildkite-bootstrap-complete
      RemainAfterExit=yes

      [Install]
      WantedBy=multi-user.target

  - path: /usr/local/sbin/bootstrap-ci.sh
    permissions: "0755"
    owner: root:root
    content: |
      #!/usr/bin/env bash
      set -euo pipefail

      # --- Determinate Nix (non-interactive) ---
      curl --proto '=https' --tlsv1.2 -fsSL -L https://install.determinate.systems/nix \
        | sh -s -- install linux --determinate --no-confirm

      # --- Buildkite Agent (APT) ---
      install -d -m 0755 /etc/apt/keyrings
      curl -fsSL https://keys.openpgp.org/vks/v1/by-fingerprint/32A37959C2FA5C3C99EFBC32A79206696452D198 \
        | gpg --dearmor -o /usr/share/keyrings/buildkite-agent-archive-keyring.gpg

      echo "deb [signed-by=/usr/share/keyrings/buildkite-agent-archive-keyring.gpg] \
        https://apt.buildkite.com/buildkite-agent stable main" \
        | tee /etc/apt/sources.list.d/buildkite-agent.list

      apt-get update -y && apt-get install -y buildkite-agent

      # Allow agent to talk to nix-daemon
      getent group nix-users >/dev/null || groupadd -r nix-users
      usermod -aG nix-users buildkite-agent
      chgrp nix-users /nix/var/nix/daemon-socket || true
      chmod 770 /nix/var/nix/daemon-socket || true

      # Deploy SSH private key (base64 encoded to avoid YAML parsing issues)
      SSH_KEY_BASE64="LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0K...your-base64-encoded-key-here"
      
      mkdir -p /var/lib/buildkite-agent/.ssh
      echo "$SSH_KEY_BASE64" | base64 -d > /var/lib/buildkite-agent/.ssh/id_ed25519
      chmod 600 /var/lib/buildkite-agent/.ssh/id_ed25519
      chown -R buildkite-agent:buildkite-agent /var/lib/buildkite-agent/.ssh

      # Configure SSH to use the key and accept GitHub/GitLab host keys
      bash -c 'cat > /var/lib/buildkite-agent/.ssh/config << "SSHEOF"
      Host github.com
        HostName github.com
        IdentityFile ~/.ssh/id_ed25519
        StrictHostKeyChecking accept-new
      SSHEOF"'
      chmod 600 /var/lib/buildkite-agent/.ssh/config
      chown buildkite-agent:buildkite-agent /var/lib/buildkite-agent/.ssh/config

      # Detect architecture and set appropriate queue
      ARCH=$(uname -m)
      if [[ "$ARCH" == "aarch64" ]] || [[ "$ARCH" == "arm64" ]]; then
        AGENT_ARCH="arm64"
        AGENT_QUEUE="nixos-arm-aws"
      elif [[ "$ARCH" == "x86_64" ]] || [[ "$ARCH" == "amd64" ]]; then
        AGENT_ARCH="x86_64"
        AGENT_QUEUE="nixos-x86-aws"
      else
        echo "Unknown architecture: $ARCH"
        AGENT_ARCH="$ARCH"
        AGENT_QUEUE="nixos-unknown"
      fi

      # Configure Buildkite agent token
      # Get your token from: Buildkite Dashboard → Organization Settings → Agents → Reveal Agent Token
      BUILDKITE_AGENT_TOKEN="bkt_your_actual_token_here"
      
      sed -i "s/xxx/$BUILDKITE_AGENT_TOKEN/g" /etc/buildkite-agent/buildkite-agent.cfg
      sed -i 's/# spawn=1/spawn=5/' /etc/buildkite-agent/buildkite-agent.cfg
      sed -i "s/# tags=\"key1=val2,key2=val2\"/tags=\"nix=true,os=nixos,arch=${AGENT_ARCH},queue=${AGENT_QUEUE}\"/" /etc/buildkite-agent/buildkite-agent.cfg

      # Systemd drop-in so the agent has Nix in PATH without sourcing profiles
      mkdir -p /etc/systemd/system/buildkite-agent.service.d
      bash -c 'cat > /etc/systemd/system/buildkite-agent.service.d/10-nix-env.conf << "EOF"
      [Service]
      Environment=NIX_SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt
      Environment=NIX_PROFILES=/nix/var/nix/profiles/default
      Environment=PATH=/nix/var/nix/profiles/default/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin
      # Disable eval cache to prevent SQLite contention between spawned agents
      Environment=NIX_CONFIG="eval-cache = false"
      EOF"'

      systemctl daemon-reload
      systemctl enable --now buildkite-agent

runcmd:
  # Configure GRUB and initramfs for overlayroot
  - [ bash, -lc, 'sed -i "s/^GRUB_FORCE_PARTUUID/#GRUB_FORCE_PARTUUID/" /etc/default/grub.d/40-force-partuuid.cfg' ]
  - [ bash, -lc, 'update-grub' ]
  - [ bash, -lc, 'update-initramfs -u' ]
  # Enable systemd service to run bootstrap script AFTER reboot
  - [ systemctl, enable, buildkite-bootstrap.service ]

power_state:
  # Reboot to activate overlayroot, then buildkite-bootstrap.service will run
  mode: reboot
  timeout: 30
  condition: True
