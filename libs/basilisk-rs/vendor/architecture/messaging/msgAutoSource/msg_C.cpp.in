#include "{type}_C.h"
#include "architecture/messaging/messaging.h"
#include "architecture/utilities/bsk_Print.h"
#include<string.h>

//! C interface to subscribe to a message
void {type}_C_subscribe({type}_C *subscriber, {type}_C *source) {{
    subscriber->payloadPointer = &(source->payload);
    subscriber->headerPointer = &(source->header);
    subscriber->header.isLinked = 1;            // set input message as linked
    subscriber->headerPointer->isLinked = 1;        // set output message as linked
}};

//! C interface to check if subscriber is indeed subscribed to a message (1: subscribed, 0: not subscribed)
int8_t {type}_C_isSubscribedTo({type}_C *subscriber, {type}_C *source) {{

    return ((subscriber->payloadPointer == &(source->payload))&&(subscriber->headerPointer == &(source->header)));
    
}};

//! C interface to claim authorship to a message
void {type}_C_addAuthor({type}_C *coownerMsg, {type}_C *targetMsg) {{
    coownerMsg->payloadPointer = &(targetMsg->payload);
    coownerMsg->headerPointer = &(targetMsg->header);
}};

//! C interface to initialize the module output message
void {type}_C_init({type}_C *owner) {{
    //! check if the msg pointer is not assigned already.  If not, then connect message to itself.
    if (owner->payloadPointer == 0) {{
        {type}_C_addAuthor(owner, owner);
    }}
}};

//! C interface to write to a message
void {type}_C_write({type}Payload *data, {type}_C *destination, int64_t moduleID, uint64_t callTime) {{
    *destination->payloadPointer = *data;
    destination->headerPointer->isWritten = 1;
    destination->headerPointer->timeWritten = callTime;
    destination->headerPointer->moduleID = moduleID;
    return;
}};

//! C interface to return a zero'd copy of the message payload
{type}Payload {type}_C_zeroMsgPayload() {{
    {type}Payload zeroMsg;
    memset(&zeroMsg, 0x0, sizeof({type}Payload));
    return zeroMsg;
}};


//! C interface to read to a message
{type}Payload {type}_C_read({type}_C *source) {{
    if (!source->headerPointer->isWritten) {{
        BSK_PRINT(MSG_ERROR,"In C input msg, you are trying to read an un-written message of type {type}.");
    }}
    //! ensure the current message container has a copy of a subscribed message.
    //! Does nothing if the message is writing to itself
    source->payload = *source->payloadPointer;

    return *source->payloadPointer;
}};

//! C interface to see if this message container has been subscribed to
int {type}_C_isLinked({type}_C *data) {{
    return (int) data->header.isLinked;
}};

//! C interface to see if this message container ever been written to
int {type}_C_isWritten({type}_C *data) {{
    if (data->header.isLinked) {{
        return (int) data->headerPointer->isWritten;
    }}
    BSK_PRINT(MSG_ERROR,"In C input msg, you are checking if an unconnected msg of type {type} is written.");
    return 0;
}};

//! C interface to see if this message container ever been written to
uint64_t {type}_C_timeWritten({type}_C *data) {{
    if (data->header.isLinked) {{
        return data->headerPointer->timeWritten;
    }}
    BSK_PRINT(MSG_ERROR,"In C input msg, you are requesting the write time of an unconnected msg of type {type}.");
    return 0;
}};

//! C interface to get the moduleID of who wrote the message
int64_t {type}_C_moduleID({type}_C *data) {{
    if (!data->header.isLinked) {{
        BSK_PRINT(MSG_ERROR,"In C input msg, you are requesting moduleID of an unconnected msg of type {type}.");
        return 0;
    }}
    if (!data->headerPointer->isWritten) {{
        BSK_PRINT(MSG_ERROR,"In C input msg, you are requesting moduleID of an unwritten msg of type {type}.");
        return 0;
    }}
    return data->headerPointer->moduleID;
}};

//! method description
void {type}_cpp_subscribe({type}_C *subscriber, void* source){{
    Message<{type}Payload>* source_t = (Message<{type}Payload>*) source;
    MsgHeader *msgPtr;
    subscriber->payloadPointer = source_t->subscribeRaw(&(msgPtr));
    subscriber->headerPointer = msgPtr;
    subscriber->header.isLinked = 1;    // set input message as linked
    subscriber->headerPointer->isLinked = 1;    // set output message as linked
}};


//! Cpp interface to check if subscriber is indeed subscribed to a message (1: subscribed, 0: not subscribed)
int8_t {type}_cpp_isSubscribedTo({type}_C *subscriber, void* source) {{

    MsgHeader *dummyMsgPtr;
    Message<{type}Payload>* source_t = (Message<{type}Payload>*) source;
    int8_t firstCheck = (subscriber->payloadPointer == source_t->getMsgPointers(&(dummyMsgPtr)));
    int8_t secondCheck = (subscriber->headerPointer == dummyMsgPtr);

    return (firstCheck && secondCheck);
    
}};
