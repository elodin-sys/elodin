struct {{name}} {
  static constexpr std::string_view TYPE_NAME = "{{name}}";

  {{cpp_ty(ty.NewtypeStruct)}} value;

  size_t encoded_size() const {
    size_t size = 0;
    {{cpp_value_size(ty.NewtypeStruct)}}
    return size;
  }

  postcard_error_t encode(std::span<std::byte>& output) const {
    postcard_slice_t slice;
    postcard_init_slice(&slice, reinterpret_cast<uint8_t*>(output.data()), output.size());
    auto res = encode_raw(&slice);
    if(res != POSTCARD_SUCCESS) return res;
    output = output.subspan(0, slice.len);
    return POSTCARD_SUCCESS;
  }

  std::vector<std::byte> encode_vec() const {
    // Pre-allocate vector with the required size
    std::vector<std::byte> vec(encoded_size());

    // Create a span from the vector
    auto span = std::span<std::byte>(vec);

    // Encode into the span
    postcard_slice_t slice;
    postcard_init_slice(&slice, reinterpret_cast<uint8_t*>(span.data()), span.size());
    auto res = encode_raw(&slice);

    // Resize to actual used length if successful
    if (res == POSTCARD_SUCCESS) {
      vec.resize(slice.len);
    } else {
      vec.clear(); // Clear the vector on error
    }

    return vec;
  }

  postcard_error_t encode_raw(postcard_slice_t* slice) const {
    postcard_error_t result;
    {{ cpp_value_encode(ty.NewtypeStruct) }}
    return result;
  }

  postcard_error_t decode(std::span<const std::byte>& input) {
    postcard_slice_t slice;
    postcard_init_slice(&slice, const_cast<uint8_t*>(reinterpret_cast<const uint8_t*>(input.data())), input.size());
    postcard_error_t result = decode_raw(&slice);
    if (result == POSTCARD_SUCCESS) {
      // Update the input span to point past the decoded data
      input = input.subspan(slice.len);
    }
    return result;
  }

  postcard_error_t decode_raw(postcard_slice_t* slice) {
    postcard_error_t result;
    {{ cpp_value_decode(ty.NewtypeStruct) }}
    return result;
  }
};
