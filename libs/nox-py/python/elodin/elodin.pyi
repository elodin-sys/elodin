from __future__ import annotations

from collections.abc import Sequence
from typing import (
    Any,
    ClassVar,
    Optional,
    Tuple,
    overload,
)

import jax
import polars as pl

from elodin import Archetype

class PrimitiveType:
    F64: PrimitiveType
    U64: PrimitiveType

class Integrator:
    Rk4: Integrator
    SemiImplicit: Integrator

class ComponentType:
    def __init__(self, ty: PrimitiveType, shape: Tuple[int, ...]): ...
    ty: PrimitiveType
    shape: jax.typing.ArrayLike
    U64: ClassVar[ComponentType]
    F64: ClassVar[ComponentType]
    F32: ClassVar[ComponentType]
    Edge: ClassVar[ComponentType]
    Quaternion: ClassVar[ComponentType]
    SpatialPosF64: ClassVar[ComponentType]
    SpatialMotionF64: ClassVar[ComponentType]

class SystemBuilder:
    def init_var(self, name: str, ty: ComponentType): ...
    def var_arrays(self) -> list[jax.typing.ArrayLike]: ...

class WorldBuilder:
    def spawn(
        self,
        archetypes: Archetype | list[Archetype],
        name: Optional[str] = None,
    ) -> EntityId: ...
    def insert(self, id: EntityId, archetypes: Archetype | Sequence[Archetype]): ...
    def run(
        self,
        system: System,
        sim_time_step: float = 1 / 120.0,
        run_time_step: Optional[float] = None,
        default_playback_speed: float = 1.0,
        max_ticks: Optional[int] = None,
        optimize: bool = False,
    ): ...
    def serve(
        self,
        system: System,
        daemon: bool = False,
        sim_time_step: float = 1 / 120.0,
        run_time_step: Optional[float] = None,
        default_playback_speed: float = 1.0,
        max_ticks: Optional[int] = None,
        addr: str = "127.0.0.1:0",
    ): ...
    def build(
        self,
        system: System,
        sim_time_step: float = 1 / 120.0,
        run_time_step: Optional[float] = None,
        default_playback_speed: float = 1.0,
        optimize: bool = False,
    ) -> Exec: ...
    def to_jax_func(
        self,
        system: System,
        sim_time_step: float = 1 / 120.0,
        run_time_step: Optional[float] = None,
        default_playback_speed: float = 1.0,
        max_ticks: Optional[int] = None,
    ) -> Tuple[object, list, list, object, dict, dict, dict]: ...

class EntityId:
    def __init__(self, id: int): ...

class SpatialTransform:
    __metadata__: ClassVar[Tuple[Component,]]
    def __init__(
        self,
        arr: Optional[jax.typing.ArrayLike] = None,
        angular: Optional[Quaternion] = None,
        linear: Optional[jax.typing.ArrayLike] = None,
    ): ...
    def flatten(self) -> Any: ...
    @staticmethod
    def unflatten(aux: Any, jax: Any) -> Any: ...
    @staticmethod
    def from_array(arr: jax.typing.ArrayLike) -> SpatialTransform: ...
    def linear(self) -> jax.Array: ...
    def angular(self) -> Quaternion: ...
    def asarray(self) -> jax.typing.ArrayLike: ...
    @overload
    def __add__(self, other: SpatialTransform) -> SpatialTransform: ...
    @overload
    def __add__(self, other: SpatialMotion) -> SpatialTransform: ...

class SpatialForce:
    __metadata__: ClassVar[Tuple[Component,]]
    def __init__(
        self,
        arr: Optional[jax.typing.ArrayLike] = None,
        torque: Optional[jax.typing.ArrayLike] = None,
        linear: Optional[jax.typing.ArrayLike] = None,
    ): ...
    @staticmethod
    def from_array(arr: jax.typing.ArrayLike) -> SpatialForce: ...
    def flatten(self) -> Any: ...
    @staticmethod
    def unflatten(aux: Any, jax: Any) -> Any: ...
    def asarray(self) -> jax.typing.ArrayLike: ...
    def force(self) -> jax.typing.ArrayLike: ...
    def torque(self) -> jax.typing.ArrayLike: ...
    def __add__(self, other: SpatialForce) -> SpatialForce: ...

class SpatialMotion:
    __metadata__: ClassVar[Tuple[Component,]]
    def __init__(
        self,
        angular: Optional[jax.typing.ArrayLike] = None,
        linear: Optional[jax.typing.ArrayLike] = None,
    ): ...
    @staticmethod
    def from_array(arr: jax.typing.ArrayLike) -> SpatialMotion: ...
    def flatten(self) -> Any: ...
    @staticmethod
    def unflatten(aux: Any, jax: Any) -> Any: ...
    def asarray(self) -> jax.typing.ArrayLike: ...
    def linear(self) -> jax.Array: ...
    def angular(self) -> jax.Array: ...
    def __add__(self, other: SpatialMotion) -> SpatialMotion: ...

class SpatialInertia:
    __metadata__: ClassVar[Tuple[Component,]]
    def __init__(
        self, mass: jax.typing.ArrayLike, inertia: Optional[jax.typing.ArrayLike] = None
    ): ...
    @staticmethod
    def from_array(arr: jax.typing.ArrayLike) -> SpatialInertia: ...
    def flatten(self) -> Any: ...
    @staticmethod
    def unflatten(aux: Any, jax: Any) -> Any: ...
    def asarray(self) -> jax.typing.ArrayLike: ...
    def mass(self) -> jax.typing.ArrayLike: ...
    def inertia_diag(self) -> jax.typing.ArrayLike: ...

class Quaternion:
    __metadata__: ClassVar[Tuple[Component,]]
    def __init__(self, arr: jax.typing.ArrayLike): ...
    @staticmethod
    def from_array(arr: jax.typing.ArrayLike) -> Quaternion: ...
    def flatten(self) -> Any: ...
    @staticmethod
    def unflatten(aux: Any, jax: Any) -> Any: ...
    def asarray(self) -> jax.typing.ArrayLike: ...
    @staticmethod
    def identity() -> Quaternion: ...
    @staticmethod
    def from_axis_angle(axis: jax.typing.ArrayLike, angle: jax.typing.ArrayLike) -> Quaternion: ...
    def vector(self) -> jax.Array: ...
    def normalize(self) -> Quaternion: ...
    def __mul__(self, other: Quaternion) -> Quaternion: ...
    def __add__(self, other: Quaternion) -> Quaternion: ...
    @overload
    def __matmul__(self, vector: jax.Array) -> jax.Array: ...
    @overload
    def __matmul__(self, spatial_transform: SpatialTransform) -> SpatialTransform: ...
    @overload
    def __matmul__(self, spatial_motion: SpatialMotion) -> SpatialMotion: ...
    @overload
    def __matmul__(self, spatial_force: SpatialForce) -> SpatialForce: ...
    def inverse(self) -> Quaternion: ...
    def integrate_body(self, body_delta: jax.Array) -> Quaternion: ...

class QueryInner:
    def join_query(self, other: QueryInner) -> QueryInner: ...
    def arrays(self) -> list[jax.Array]: ...
    def map(self, ty: jax.Array, f: Component) -> Any: ...
    @staticmethod
    def from_builder(
        sys: SystemBuilder, component_ids: list[str], args: list[Any]
    ) -> QueryInner: ...
    def output(self, builder: SystemBuilder, args: list[Any]) -> Any: ...

class GraphQueryInner:
    def arrays(
        self, from_query: QueryInner, to_query: QueryInner
    ) -> dict[int, Tuple[list[jax.Array], list[jax.Array]]]: ...
    @staticmethod
    def from_builder(builder: SystemBuilder, edge_name: str, reverse: bool) -> GraphQueryInner: ...
    @staticmethod
    def from_builder_total_edge(builder: SystemBuilder) -> GraphQueryInner: ...
    def map(
        self,
        from_query: QueryInner,
        to_query: QueryInner,
        ty: jax.typing.ArrayLike,
        f: Component,
    ) -> QueryInner: ...

class Edge:
    __metadata__: ClassVar[Tuple[Component,]]
    def __init__(self, left: EntityId, right: EntityId): ...
    def flatten(self) -> Any: ...
    @staticmethod
    def unflatten(aux: Any, jax: Any) -> Any: ...

class Component:
    asset: bool
    def __init__(
        self,
        name: str,
        ty: Optional[ComponentType] = None,
        asset: bool = False,
        metadata: dict[str, str | bool | int] = {},
    ): ...
    @staticmethod
    def id(component: Any) -> str:
        """
        DEPRECATED: Use `Component.name()` instead.
        """
    @staticmethod
    def name(component: Any) -> str: ...
    @staticmethod
    def index(component: Any) -> ShapeIndexer: ...
    @staticmethod
    def of(component: Any) -> Component: ...

class ShapeIndexer:
    def __getitem__(self, index: Any) -> ShapeIndexer: ...

class Impeller:
    @staticmethod
    def tcp(addr: str) -> Impeller: ...

class Exec:
    def run(self, ticks: int = 1, show_progress: bool = True): ...
    def profile(self) -> dict[str, float]: ...
    def save_archive(self, path: str, format: str): ...
    def history(self, components: str | list[str]) -> pl.DataFrame: ...

class GraphEntity:
    def __init__(self, entity_id: EntityId, *components: ShapeIndexer | Any): ...

def six_dof(
    time_step: float | None = None,
    sys: Any = None,
    integrator: Integrator = Integrator.Rk4,
) -> System: ...
def skew(arr: jax.Array) -> jax.Array: ...

class System:
    def pipe(self, other: System) -> System: ...
    def __or__(self, other: System) -> System: ...

class PyFnSystem:
    def __init__(
        self,
        sys: Any,
        input_ids: list[str],
        output_ids: list[str],
        edge_ids: list[str],
        name: str,
    ): ...
    def system(self) -> System: ...
