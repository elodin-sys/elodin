syntax = 'proto3';

package elodin.types.api;

service Api {
    // User Ops
    rpc CreateUser(CreateUserReq) returns (CreateUserResp);
    rpc CurrentUser(CurrentUserReq) returns (CurrentUserResp);
    rpc UpdateUser(UpdateUserReq) returns (UpdateUserResp);

    // Billing Account
    rpc CreateBillingAccount(CreateBillingAccountReq) returns (BillingAccount);

    // License Gen
    rpc GenerateLicense(GenerateLicenseReq) returns (GenerateLicenseResp);

    // Stripe
    rpc GetStripeSubscriptionStatus(GetStripeSubscriptionStatusReq) returns (StripeSubscriptionStatus);
}

message CurrentUserReq {}
message CurrentUserResp {
    bytes id = 1;
    string email = 2;
    string name = 3;
    string avatar = 4;
    LicenseType license_type = 5;
    optional bytes billing_account_id = 6;
    optional StripeSubscriptionStatus subscription_status = 7;
    optional OnboardingData onboarding_data = 8;
    uint32 monte_carlo_minutes_used = 9;
}

enum LicenseType {
    NONE = 0;
    NON_COMMERCIAL = 1;
    COMMERCIAL = 2;
    GOD_TIER = 3;
}

message CreateUserReq {
    optional string email = 1;
    optional string name = 2;
}

message CreateUserResp {
    bytes id = 1;
}

message UpdateUserReq {
    optional OnboardingData onboarding_data = 1;
}

message OnboardingData {
    repeated string usecases = 1;
}

message UpdateUserResp {}

message CreateBillingAccountReq {
    string name = 1;
    LicenseType trial_license_type = 2;
}

message BillingAccount {
    bytes id = 1;
    string name = 2;
    string customer_id = 3;
}

message GetStripeSubscriptionStatusReq {
    string billing_account_id = 1;
}

message StripeSubscriptionStatus {
    string portal_url = 1;
    int64 subscription_end = 2;
    optional int64 trial_start = 3;
    optional int64 trial_end = 4;
    uint32 monte_carlo_credit = 5;
}


message GenerateLicenseReq {
    bytes machine_id = 1;
}

message GenerateLicenseResp {
    bytes license = 1;
}
