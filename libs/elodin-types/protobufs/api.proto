syntax = 'proto3';

package elodin.types.api;

service Api {
    // User Ops
    rpc CreateUser(CreateUserReq) returns (CreateUserResp);
    rpc CurrentUser(CurrentUserReq) returns (CurrentUserResp);
    rpc UpdateUser(UpdateUserReq) returns (UpdateUserResp);

    // Sandbox Ops
    rpc GetSandbox(GetSandboxReq) returns (Sandbox);
    rpc ListSandboxes(ListSandboxesReq) returns (ListSandboxesResp);

    rpc CreateSandbox(CreateSandboxReq) returns (CreateSandboxResp);
    rpc UpdateSandbox(UpdateSandboxReq) returns (UpdateSandboxResp);
    rpc BootSandbox(BootSandboxReq) returns (BootSandboxResp);
    rpc DeleteSandbox(DeleteSandboxReq) returns (Sandbox);

    rpc SandboxEvents(GetSandboxReq) returns (stream Sandbox);

    // Monte Carlo
    rpc ListMonteCarloRuns(ListMonteCarloRunsReq) returns (ListMonteCarloRunsResp);

    rpc CreateMonteCarloRun(CreateMonteCarloRunReq) returns (CreateMonteCarloRunResp);
    rpc StartMonteCarloRun(StartMonteCarloRunReq) returns (StartMonteCarloRunResp);
    rpc GetMonteCarloRun(GetMonteCarloRunReq) returns (MonteCarloRun);
    rpc MonteCarloRunEvents(GetMonteCarloRunReq) returns (stream MonteCarloRun);
    rpc MonteCarloBatchEvents(GetMonteCarloRunReq) returns (stream MonteCarloBatch);

    rpc GetMonteCarloResults(GetMonteCarloResultsReq) returns (GetMonteCarloResultsResp);

    // Billing Account
    rpc CreateBillingAccount(CreateBillingAccountReq) returns (BillingAccount);

    // License Gen
    rpc GenerateLicense(GenerateLicenseReq) returns (GenerateLicenseResp);
}

message CurrentUserReq {}
message CurrentUserResp {
    bytes id = 1;
    string email = 2;
    string name = 3;
    string avatar = 4;
    LicenseType license_type = 5;
    optional bytes billing_account_id = 6;
    optional OnboardingData onboarding_data = 7;
}

enum LicenseType {
    NONE = 0;
    NON_COMMERCIAL = 1;
    COMMERCIAL = 2;
    GOD_TIER = 3;
}

message CreateUserReq {
    optional string email = 1;
    optional string name = 2;
}

message CreateUserResp {
    bytes id = 1;
}

message UpdateUserReq {
    optional OnboardingData onboarding_data = 1;
}

message OnboardingData {
    repeated string usecases = 1;
}

message UpdateUserResp {}

message CreateSandboxReq {
    string name = 1;
    string code = 2;
    optional string template = 3;
}

message CreateSandboxResp {
    bytes id = 1;
}

message UpdateSandboxReq {
    bytes id = 1;
    string name = 2;
    optional string code = 3;
    optional string draft_code = 4;
    bool public = 5;
}

message UpdateSandboxResp {
    repeated string errors = 1;
}

message BootSandboxReq {
    bytes id = 1;
}

message BootSandboxResp {}

message Sandbox {
    bytes id = 1;
    string name = 2;
    string code = 3;
    Status status = 4;
    enum Status {
        OFF = 0;
        VM_BOOTING = 1;
        ERROR = 2;
        RUNNING = 3;
    }
    string draft_code = 5;
    bool public = 6;
    optional bytes user_id = 7;
}

message Page {
    bytes last_id = 1;
    uint32 count = 2;
}

message ListSandboxesReq {
    Page page = 1;
}

message ListSandboxesResp {
    repeated Sandbox sandboxes = 1;
    Page next_page = 2;
}

message GetSandboxReq {
    bytes id = 1;
}

message DeleteSandboxReq {
    bytes id = 1;
}

message ListMonteCarloRunsReq {}

message ListMonteCarloRunsResp {
    repeated MonteCarloRun monte_carlo_runs = 1;
}

message CreateMonteCarloRunReq {
    string name = 1;
    uint32 samples = 2;
    uint64 max_duration = 3;
    string metadata = 4;
}

message CreateMonteCarloRunResp {
    bytes id = 1;
    string upload_url = 2;
}

message StartMonteCarloRunReq {
    bytes id = 1;
}

message StartMonteCarloRunResp {}

message GetMonteCarloRunReq {
    bytes id = 1;
}

message MonteCarloRun {
    bytes id = 1;
    string name = 2;
    uint32 samples = 3;
    uint64 max_duration = 4;
    Status status = 5;
    enum Status {
        PENDING = 0;
        RUNNING = 1;
        DONE = 2;
    }
    string metadata = 6;
    optional uint64 started = 7;
    repeated MonteCarloBatch batches = 8;
}

message MonteCarloBatch {
    bytes run_id = 1;
    uint32 batch_number = 2;
    uint32 samples = 3;
    bytes failures = 4;
    optional uint64 finished_time = 5;
    Status status = 6;
    enum Status {
        PENDING = 0;
        RUNNING = 1;
        DONE = 2;
    }

}

message GetMonteCarloResultsReq {
    bytes id = 1;
    uint32 batch_number = 2;
}

message GetMonteCarloResultsResp {
    string download_url = 1;
}

message CreateBillingAccountReq {
    string name = 1;
    LicenseType trial_license_type = 2;
}

message BillingAccount {
    bytes id = 1;
    string name = 2;
    string customer_id = 3;
}


message GenerateLicenseReq {
    bytes machine_id = 1;
}

message GenerateLicenseResp {
    bytes license = 1;
}
