// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: triton.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_triton_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_triton_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_triton_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_triton_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_triton_2eproto;
namespace jax_triton {
class TritonAnyKernelCall;
struct TritonAnyKernelCallDefaultTypeInternal;
extern TritonAnyKernelCallDefaultTypeInternal _TritonAnyKernelCall_default_instance_;
class TritonAutotunedKernelCall;
struct TritonAutotunedKernelCallDefaultTypeInternal;
extern TritonAutotunedKernelCallDefaultTypeInternal _TritonAutotunedKernelCall_default_instance_;
class TritonAutotunedKernelCall_Config;
struct TritonAutotunedKernelCall_ConfigDefaultTypeInternal;
extern TritonAutotunedKernelCall_ConfigDefaultTypeInternal _TritonAutotunedKernelCall_Config_default_instance_;
class TritonAutotunedKernelCall_InputOutputAlias;
struct TritonAutotunedKernelCall_InputOutputAliasDefaultTypeInternal;
extern TritonAutotunedKernelCall_InputOutputAliasDefaultTypeInternal _TritonAutotunedKernelCall_InputOutputAlias_default_instance_;
class TritonKernel;
struct TritonKernelDefaultTypeInternal;
extern TritonKernelDefaultTypeInternal _TritonKernel_default_instance_;
class TritonKernelCall;
struct TritonKernelCallDefaultTypeInternal;
extern TritonKernelCallDefaultTypeInternal _TritonKernelCall_default_instance_;
class TritonKernelCall_Parameter;
struct TritonKernelCall_ParameterDefaultTypeInternal;
extern TritonKernelCall_ParameterDefaultTypeInternal _TritonKernelCall_Parameter_default_instance_;
class TritonKernelCall_Parameter_Array;
struct TritonKernelCall_Parameter_ArrayDefaultTypeInternal;
extern TritonKernelCall_Parameter_ArrayDefaultTypeInternal _TritonKernelCall_Parameter_Array_default_instance_;
}  // namespace jax_triton
PROTOBUF_NAMESPACE_OPEN
template<> ::jax_triton::TritonAnyKernelCall* Arena::CreateMaybeMessage<::jax_triton::TritonAnyKernelCall>(Arena*);
template<> ::jax_triton::TritonAutotunedKernelCall* Arena::CreateMaybeMessage<::jax_triton::TritonAutotunedKernelCall>(Arena*);
template<> ::jax_triton::TritonAutotunedKernelCall_Config* Arena::CreateMaybeMessage<::jax_triton::TritonAutotunedKernelCall_Config>(Arena*);
template<> ::jax_triton::TritonAutotunedKernelCall_InputOutputAlias* Arena::CreateMaybeMessage<::jax_triton::TritonAutotunedKernelCall_InputOutputAlias>(Arena*);
template<> ::jax_triton::TritonKernel* Arena::CreateMaybeMessage<::jax_triton::TritonKernel>(Arena*);
template<> ::jax_triton::TritonKernelCall* Arena::CreateMaybeMessage<::jax_triton::TritonKernelCall>(Arena*);
template<> ::jax_triton::TritonKernelCall_Parameter* Arena::CreateMaybeMessage<::jax_triton::TritonKernelCall_Parameter>(Arena*);
template<> ::jax_triton::TritonKernelCall_Parameter_Array* Arena::CreateMaybeMessage<::jax_triton::TritonKernelCall_Parameter_Array>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace jax_triton {

// ===================================================================

class TritonKernel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jax_triton.TritonKernel) */ {
 public:
  inline TritonKernel() : TritonKernel(nullptr) {}
  ~TritonKernel() override;
  explicit PROTOBUF_CONSTEXPR TritonKernel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TritonKernel(const TritonKernel& from);
  TritonKernel(TritonKernel&& from) noexcept
    : TritonKernel() {
    *this = ::std::move(from);
  }

  inline TritonKernel& operator=(const TritonKernel& from) {
    CopyFrom(from);
    return *this;
  }
  inline TritonKernel& operator=(TritonKernel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TritonKernel& default_instance() {
    return *internal_default_instance();
  }
  static inline const TritonKernel* internal_default_instance() {
    return reinterpret_cast<const TritonKernel*>(
               &_TritonKernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TritonKernel& a, TritonKernel& b) {
    a.Swap(&b);
  }
  inline void Swap(TritonKernel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TritonKernel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TritonKernel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TritonKernel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TritonKernel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TritonKernel& from) {
    TritonKernel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TritonKernel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jax_triton.TritonKernel";
  }
  protected:
  explicit TritonKernel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKernelNameFieldNumber = 1,
    kPtxFieldNumber = 4,
    kTtirFieldNumber = 5,
    kNumWarpsFieldNumber = 2,
    kSharedMemBytesFieldNumber = 3,
    kComputeCapabilityFieldNumber = 6,
    kClusterDim0FieldNumber = 7,
    kClusterDim1FieldNumber = 8,
    kClusterDim2FieldNumber = 9,
  };
  // string kernel_name = 1;
  void clear_kernel_name();
  const std::string& kernel_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kernel_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kernel_name();
  PROTOBUF_NODISCARD std::string* release_kernel_name();
  void set_allocated_kernel_name(std::string* kernel_name);
  private:
  const std::string& _internal_kernel_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kernel_name(const std::string& value);
  std::string* _internal_mutable_kernel_name();
  public:

  // string ptx = 4;
  void clear_ptx();
  const std::string& ptx() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ptx(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ptx();
  PROTOBUF_NODISCARD std::string* release_ptx();
  void set_allocated_ptx(std::string* ptx);
  private:
  const std::string& _internal_ptx() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ptx(const std::string& value);
  std::string* _internal_mutable_ptx();
  public:

  // string ttir = 5;
  void clear_ttir();
  const std::string& ttir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ttir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ttir();
  PROTOBUF_NODISCARD std::string* release_ttir();
  void set_allocated_ttir(std::string* ttir);
  private:
  const std::string& _internal_ttir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ttir(const std::string& value);
  std::string* _internal_mutable_ttir();
  public:

  // uint32 num_warps = 2;
  void clear_num_warps();
  uint32_t num_warps() const;
  void set_num_warps(uint32_t value);
  private:
  uint32_t _internal_num_warps() const;
  void _internal_set_num_warps(uint32_t value);
  public:

  // uint32 shared_mem_bytes = 3;
  void clear_shared_mem_bytes();
  uint32_t shared_mem_bytes() const;
  void set_shared_mem_bytes(uint32_t value);
  private:
  uint32_t _internal_shared_mem_bytes() const;
  void _internal_set_shared_mem_bytes(uint32_t value);
  public:

  // uint32 compute_capability = 6;
  void clear_compute_capability();
  uint32_t compute_capability() const;
  void set_compute_capability(uint32_t value);
  private:
  uint32_t _internal_compute_capability() const;
  void _internal_set_compute_capability(uint32_t value);
  public:

  // uint32 cluster_dim_0 = 7;
  void clear_cluster_dim_0();
  uint32_t cluster_dim_0() const;
  void set_cluster_dim_0(uint32_t value);
  private:
  uint32_t _internal_cluster_dim_0() const;
  void _internal_set_cluster_dim_0(uint32_t value);
  public:

  // uint32 cluster_dim_1 = 8;
  void clear_cluster_dim_1();
  uint32_t cluster_dim_1() const;
  void set_cluster_dim_1(uint32_t value);
  private:
  uint32_t _internal_cluster_dim_1() const;
  void _internal_set_cluster_dim_1(uint32_t value);
  public:

  // uint32 cluster_dim_2 = 9;
  void clear_cluster_dim_2();
  uint32_t cluster_dim_2() const;
  void set_cluster_dim_2(uint32_t value);
  private:
  uint32_t _internal_cluster_dim_2() const;
  void _internal_set_cluster_dim_2(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:jax_triton.TritonKernel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kernel_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ptx_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ttir_;
    uint32_t num_warps_;
    uint32_t shared_mem_bytes_;
    uint32_t compute_capability_;
    uint32_t cluster_dim_0_;
    uint32_t cluster_dim_1_;
    uint32_t cluster_dim_2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_triton_2eproto;
};
// -------------------------------------------------------------------

class TritonKernelCall_Parameter_Array final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jax_triton.TritonKernelCall.Parameter.Array) */ {
 public:
  inline TritonKernelCall_Parameter_Array() : TritonKernelCall_Parameter_Array(nullptr) {}
  ~TritonKernelCall_Parameter_Array() override;
  explicit PROTOBUF_CONSTEXPR TritonKernelCall_Parameter_Array(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TritonKernelCall_Parameter_Array(const TritonKernelCall_Parameter_Array& from);
  TritonKernelCall_Parameter_Array(TritonKernelCall_Parameter_Array&& from) noexcept
    : TritonKernelCall_Parameter_Array() {
    *this = ::std::move(from);
  }

  inline TritonKernelCall_Parameter_Array& operator=(const TritonKernelCall_Parameter_Array& from) {
    CopyFrom(from);
    return *this;
  }
  inline TritonKernelCall_Parameter_Array& operator=(TritonKernelCall_Parameter_Array&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TritonKernelCall_Parameter_Array& default_instance() {
    return *internal_default_instance();
  }
  static inline const TritonKernelCall_Parameter_Array* internal_default_instance() {
    return reinterpret_cast<const TritonKernelCall_Parameter_Array*>(
               &_TritonKernelCall_Parameter_Array_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TritonKernelCall_Parameter_Array& a, TritonKernelCall_Parameter_Array& b) {
    a.Swap(&b);
  }
  inline void Swap(TritonKernelCall_Parameter_Array* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TritonKernelCall_Parameter_Array* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TritonKernelCall_Parameter_Array* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TritonKernelCall_Parameter_Array>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TritonKernelCall_Parameter_Array& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TritonKernelCall_Parameter_Array& from) {
    TritonKernelCall_Parameter_Array::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TritonKernelCall_Parameter_Array* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jax_triton.TritonKernelCall.Parameter.Array";
  }
  protected:
  explicit TritonKernelCall_Parameter_Array(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBytesToZeroFieldNumber = 1,
    kPtrDivisibilityFieldNumber = 2,
  };
  // uint64 bytes_to_zero = 1;
  void clear_bytes_to_zero();
  uint64_t bytes_to_zero() const;
  void set_bytes_to_zero(uint64_t value);
  private:
  uint64_t _internal_bytes_to_zero() const;
  void _internal_set_bytes_to_zero(uint64_t value);
  public:

  // uint64 ptr_divisibility = 2;
  void clear_ptr_divisibility();
  uint64_t ptr_divisibility() const;
  void set_ptr_divisibility(uint64_t value);
  private:
  uint64_t _internal_ptr_divisibility() const;
  void _internal_set_ptr_divisibility(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:jax_triton.TritonKernelCall.Parameter.Array)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t bytes_to_zero_;
    uint64_t ptr_divisibility_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_triton_2eproto;
};
// -------------------------------------------------------------------

class TritonKernelCall_Parameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jax_triton.TritonKernelCall.Parameter) */ {
 public:
  inline TritonKernelCall_Parameter() : TritonKernelCall_Parameter(nullptr) {}
  ~TritonKernelCall_Parameter() override;
  explicit PROTOBUF_CONSTEXPR TritonKernelCall_Parameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TritonKernelCall_Parameter(const TritonKernelCall_Parameter& from);
  TritonKernelCall_Parameter(TritonKernelCall_Parameter&& from) noexcept
    : TritonKernelCall_Parameter() {
    *this = ::std::move(from);
  }

  inline TritonKernelCall_Parameter& operator=(const TritonKernelCall_Parameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TritonKernelCall_Parameter& operator=(TritonKernelCall_Parameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TritonKernelCall_Parameter& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kArray = 1,
    kBool = 2,
    kI32 = 3,
    kU32 = 4,
    kI64 = 5,
    kU64 = 6,
    kF32 = 7,
    kF64 = 8,
    VALUE_NOT_SET = 0,
  };

  static inline const TritonKernelCall_Parameter* internal_default_instance() {
    return reinterpret_cast<const TritonKernelCall_Parameter*>(
               &_TritonKernelCall_Parameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TritonKernelCall_Parameter& a, TritonKernelCall_Parameter& b) {
    a.Swap(&b);
  }
  inline void Swap(TritonKernelCall_Parameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TritonKernelCall_Parameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TritonKernelCall_Parameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TritonKernelCall_Parameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TritonKernelCall_Parameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TritonKernelCall_Parameter& from) {
    TritonKernelCall_Parameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TritonKernelCall_Parameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jax_triton.TritonKernelCall.Parameter";
  }
  protected:
  explicit TritonKernelCall_Parameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TritonKernelCall_Parameter_Array Array;

  // accessors -------------------------------------------------------

  enum : int {
    kArrayFieldNumber = 1,
    kBoolFieldNumber = 2,
    kI32FieldNumber = 3,
    kU32FieldNumber = 4,
    kI64FieldNumber = 5,
    kU64FieldNumber = 6,
    kF32FieldNumber = 7,
    kF64FieldNumber = 8,
  };
  // .jax_triton.TritonKernelCall.Parameter.Array array = 1;
  bool has_array() const;
  private:
  bool _internal_has_array() const;
  public:
  void clear_array();
  const ::jax_triton::TritonKernelCall_Parameter_Array& array() const;
  PROTOBUF_NODISCARD ::jax_triton::TritonKernelCall_Parameter_Array* release_array();
  ::jax_triton::TritonKernelCall_Parameter_Array* mutable_array();
  void set_allocated_array(::jax_triton::TritonKernelCall_Parameter_Array* array);
  private:
  const ::jax_triton::TritonKernelCall_Parameter_Array& _internal_array() const;
  ::jax_triton::TritonKernelCall_Parameter_Array* _internal_mutable_array();
  public:
  void unsafe_arena_set_allocated_array(
      ::jax_triton::TritonKernelCall_Parameter_Array* array);
  ::jax_triton::TritonKernelCall_Parameter_Array* unsafe_arena_release_array();

  // bool bool_ = 2;
  bool has_bool_() const;
  private:
  bool _internal_has_bool_() const;
  public:
  void clear_bool_();
  bool bool_() const;
  void set_bool_(bool value);
  private:
  bool _internal_bool_() const;
  void _internal_set_bool_(bool value);
  public:

  // int32 i32 = 3;
  bool has_i32() const;
  private:
  bool _internal_has_i32() const;
  public:
  void clear_i32();
  int32_t i32() const;
  void set_i32(int32_t value);
  private:
  int32_t _internal_i32() const;
  void _internal_set_i32(int32_t value);
  public:

  // uint32 u32 = 4;
  bool has_u32() const;
  private:
  bool _internal_has_u32() const;
  public:
  void clear_u32();
  uint32_t u32() const;
  void set_u32(uint32_t value);
  private:
  uint32_t _internal_u32() const;
  void _internal_set_u32(uint32_t value);
  public:

  // int64 i64 = 5;
  bool has_i64() const;
  private:
  bool _internal_has_i64() const;
  public:
  void clear_i64();
  int64_t i64() const;
  void set_i64(int64_t value);
  private:
  int64_t _internal_i64() const;
  void _internal_set_i64(int64_t value);
  public:

  // uint64 u64 = 6;
  bool has_u64() const;
  private:
  bool _internal_has_u64() const;
  public:
  void clear_u64();
  uint64_t u64() const;
  void set_u64(uint64_t value);
  private:
  uint64_t _internal_u64() const;
  void _internal_set_u64(uint64_t value);
  public:

  // float f32 = 7;
  bool has_f32() const;
  private:
  bool _internal_has_f32() const;
  public:
  void clear_f32();
  float f32() const;
  void set_f32(float value);
  private:
  float _internal_f32() const;
  void _internal_set_f32(float value);
  public:

  // double f64 = 8;
  bool has_f64() const;
  private:
  bool _internal_has_f64() const;
  public:
  void clear_f64();
  double f64() const;
  void set_f64(double value);
  private:
  double _internal_f64() const;
  void _internal_set_f64(double value);
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:jax_triton.TritonKernelCall.Parameter)
 private:
  class _Internal;
  void set_has_array();
  void set_has_bool_();
  void set_has_i32();
  void set_has_u32();
  void set_has_i64();
  void set_has_u64();
  void set_has_f32();
  void set_has_f64();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::jax_triton::TritonKernelCall_Parameter_Array* array_;
      bool bool__;
      int32_t i32_;
      uint32_t u32_;
      int64_t i64_;
      uint64_t u64_;
      float f32_;
      double f64_;
    } value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_triton_2eproto;
};
// -------------------------------------------------------------------

class TritonKernelCall final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jax_triton.TritonKernelCall) */ {
 public:
  inline TritonKernelCall() : TritonKernelCall(nullptr) {}
  ~TritonKernelCall() override;
  explicit PROTOBUF_CONSTEXPR TritonKernelCall(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TritonKernelCall(const TritonKernelCall& from);
  TritonKernelCall(TritonKernelCall&& from) noexcept
    : TritonKernelCall() {
    *this = ::std::move(from);
  }

  inline TritonKernelCall& operator=(const TritonKernelCall& from) {
    CopyFrom(from);
    return *this;
  }
  inline TritonKernelCall& operator=(TritonKernelCall&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TritonKernelCall& default_instance() {
    return *internal_default_instance();
  }
  static inline const TritonKernelCall* internal_default_instance() {
    return reinterpret_cast<const TritonKernelCall*>(
               &_TritonKernelCall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TritonKernelCall& a, TritonKernelCall& b) {
    a.Swap(&b);
  }
  inline void Swap(TritonKernelCall* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TritonKernelCall* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TritonKernelCall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TritonKernelCall>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TritonKernelCall& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TritonKernelCall& from) {
    TritonKernelCall::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TritonKernelCall* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jax_triton.TritonKernelCall";
  }
  protected:
  explicit TritonKernelCall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TritonKernelCall_Parameter Parameter;

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 5,
    kKernelFieldNumber = 1,
    kGrid0FieldNumber = 2,
    kGrid1FieldNumber = 3,
    kGrid2FieldNumber = 4,
  };
  // repeated .jax_triton.TritonKernelCall.Parameter parameters = 5;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  ::jax_triton::TritonKernelCall_Parameter* mutable_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jax_triton::TritonKernelCall_Parameter >*
      mutable_parameters();
  private:
  const ::jax_triton::TritonKernelCall_Parameter& _internal_parameters(int index) const;
  ::jax_triton::TritonKernelCall_Parameter* _internal_add_parameters();
  public:
  const ::jax_triton::TritonKernelCall_Parameter& parameters(int index) const;
  ::jax_triton::TritonKernelCall_Parameter* add_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jax_triton::TritonKernelCall_Parameter >&
      parameters() const;

  // .jax_triton.TritonKernel kernel = 1;
  bool has_kernel() const;
  private:
  bool _internal_has_kernel() const;
  public:
  void clear_kernel();
  const ::jax_triton::TritonKernel& kernel() const;
  PROTOBUF_NODISCARD ::jax_triton::TritonKernel* release_kernel();
  ::jax_triton::TritonKernel* mutable_kernel();
  void set_allocated_kernel(::jax_triton::TritonKernel* kernel);
  private:
  const ::jax_triton::TritonKernel& _internal_kernel() const;
  ::jax_triton::TritonKernel* _internal_mutable_kernel();
  public:
  void unsafe_arena_set_allocated_kernel(
      ::jax_triton::TritonKernel* kernel);
  ::jax_triton::TritonKernel* unsafe_arena_release_kernel();

  // uint32 grid_0 = 2;
  void clear_grid_0();
  uint32_t grid_0() const;
  void set_grid_0(uint32_t value);
  private:
  uint32_t _internal_grid_0() const;
  void _internal_set_grid_0(uint32_t value);
  public:

  // uint32 grid_1 = 3;
  void clear_grid_1();
  uint32_t grid_1() const;
  void set_grid_1(uint32_t value);
  private:
  uint32_t _internal_grid_1() const;
  void _internal_set_grid_1(uint32_t value);
  public:

  // uint32 grid_2 = 4;
  void clear_grid_2();
  uint32_t grid_2() const;
  void set_grid_2(uint32_t value);
  private:
  uint32_t _internal_grid_2() const;
  void _internal_set_grid_2(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:jax_triton.TritonKernelCall)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jax_triton::TritonKernelCall_Parameter > parameters_;
    ::jax_triton::TritonKernel* kernel_;
    uint32_t grid_0_;
    uint32_t grid_1_;
    uint32_t grid_2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_triton_2eproto;
};
// -------------------------------------------------------------------

class TritonAutotunedKernelCall_Config final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jax_triton.TritonAutotunedKernelCall.Config) */ {
 public:
  inline TritonAutotunedKernelCall_Config() : TritonAutotunedKernelCall_Config(nullptr) {}
  ~TritonAutotunedKernelCall_Config() override;
  explicit PROTOBUF_CONSTEXPR TritonAutotunedKernelCall_Config(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TritonAutotunedKernelCall_Config(const TritonAutotunedKernelCall_Config& from);
  TritonAutotunedKernelCall_Config(TritonAutotunedKernelCall_Config&& from) noexcept
    : TritonAutotunedKernelCall_Config() {
    *this = ::std::move(from);
  }

  inline TritonAutotunedKernelCall_Config& operator=(const TritonAutotunedKernelCall_Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline TritonAutotunedKernelCall_Config& operator=(TritonAutotunedKernelCall_Config&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TritonAutotunedKernelCall_Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const TritonAutotunedKernelCall_Config* internal_default_instance() {
    return reinterpret_cast<const TritonAutotunedKernelCall_Config*>(
               &_TritonAutotunedKernelCall_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TritonAutotunedKernelCall_Config& a, TritonAutotunedKernelCall_Config& b) {
    a.Swap(&b);
  }
  inline void Swap(TritonAutotunedKernelCall_Config* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TritonAutotunedKernelCall_Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TritonAutotunedKernelCall_Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TritonAutotunedKernelCall_Config>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TritonAutotunedKernelCall_Config& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TritonAutotunedKernelCall_Config& from) {
    TritonAutotunedKernelCall_Config::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TritonAutotunedKernelCall_Config* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jax_triton.TritonAutotunedKernelCall.Config";
  }
  protected:
  explicit TritonAutotunedKernelCall_Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kKernelCallFieldNumber = 1,
  };
  // string description = 2;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .jax_triton.TritonKernelCall kernel_call = 1;
  bool has_kernel_call() const;
  private:
  bool _internal_has_kernel_call() const;
  public:
  void clear_kernel_call();
  const ::jax_triton::TritonKernelCall& kernel_call() const;
  PROTOBUF_NODISCARD ::jax_triton::TritonKernelCall* release_kernel_call();
  ::jax_triton::TritonKernelCall* mutable_kernel_call();
  void set_allocated_kernel_call(::jax_triton::TritonKernelCall* kernel_call);
  private:
  const ::jax_triton::TritonKernelCall& _internal_kernel_call() const;
  ::jax_triton::TritonKernelCall* _internal_mutable_kernel_call();
  public:
  void unsafe_arena_set_allocated_kernel_call(
      ::jax_triton::TritonKernelCall* kernel_call);
  ::jax_triton::TritonKernelCall* unsafe_arena_release_kernel_call();

  // @@protoc_insertion_point(class_scope:jax_triton.TritonAutotunedKernelCall.Config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::jax_triton::TritonKernelCall* kernel_call_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_triton_2eproto;
};
// -------------------------------------------------------------------

class TritonAutotunedKernelCall_InputOutputAlias final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jax_triton.TritonAutotunedKernelCall.InputOutputAlias) */ {
 public:
  inline TritonAutotunedKernelCall_InputOutputAlias() : TritonAutotunedKernelCall_InputOutputAlias(nullptr) {}
  ~TritonAutotunedKernelCall_InputOutputAlias() override;
  explicit PROTOBUF_CONSTEXPR TritonAutotunedKernelCall_InputOutputAlias(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TritonAutotunedKernelCall_InputOutputAlias(const TritonAutotunedKernelCall_InputOutputAlias& from);
  TritonAutotunedKernelCall_InputOutputAlias(TritonAutotunedKernelCall_InputOutputAlias&& from) noexcept
    : TritonAutotunedKernelCall_InputOutputAlias() {
    *this = ::std::move(from);
  }

  inline TritonAutotunedKernelCall_InputOutputAlias& operator=(const TritonAutotunedKernelCall_InputOutputAlias& from) {
    CopyFrom(from);
    return *this;
  }
  inline TritonAutotunedKernelCall_InputOutputAlias& operator=(TritonAutotunedKernelCall_InputOutputAlias&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TritonAutotunedKernelCall_InputOutputAlias& default_instance() {
    return *internal_default_instance();
  }
  static inline const TritonAutotunedKernelCall_InputOutputAlias* internal_default_instance() {
    return reinterpret_cast<const TritonAutotunedKernelCall_InputOutputAlias*>(
               &_TritonAutotunedKernelCall_InputOutputAlias_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TritonAutotunedKernelCall_InputOutputAlias& a, TritonAutotunedKernelCall_InputOutputAlias& b) {
    a.Swap(&b);
  }
  inline void Swap(TritonAutotunedKernelCall_InputOutputAlias* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TritonAutotunedKernelCall_InputOutputAlias* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TritonAutotunedKernelCall_InputOutputAlias* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TritonAutotunedKernelCall_InputOutputAlias>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TritonAutotunedKernelCall_InputOutputAlias& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TritonAutotunedKernelCall_InputOutputAlias& from) {
    TritonAutotunedKernelCall_InputOutputAlias::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TritonAutotunedKernelCall_InputOutputAlias* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jax_triton.TritonAutotunedKernelCall.InputOutputAlias";
  }
  protected:
  explicit TritonAutotunedKernelCall_InputOutputAlias(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputBufferIdxFieldNumber = 1,
    kOutputBufferIdxFieldNumber = 2,
    kBufferSizeBytesFieldNumber = 3,
  };
  // uint32 input_buffer_idx = 1;
  void clear_input_buffer_idx();
  uint32_t input_buffer_idx() const;
  void set_input_buffer_idx(uint32_t value);
  private:
  uint32_t _internal_input_buffer_idx() const;
  void _internal_set_input_buffer_idx(uint32_t value);
  public:

  // uint32 output_buffer_idx = 2;
  void clear_output_buffer_idx();
  uint32_t output_buffer_idx() const;
  void set_output_buffer_idx(uint32_t value);
  private:
  uint32_t _internal_output_buffer_idx() const;
  void _internal_set_output_buffer_idx(uint32_t value);
  public:

  // uint64 buffer_size_bytes = 3;
  void clear_buffer_size_bytes();
  uint64_t buffer_size_bytes() const;
  void set_buffer_size_bytes(uint64_t value);
  private:
  uint64_t _internal_buffer_size_bytes() const;
  void _internal_set_buffer_size_bytes(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:jax_triton.TritonAutotunedKernelCall.InputOutputAlias)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t input_buffer_idx_;
    uint32_t output_buffer_idx_;
    uint64_t buffer_size_bytes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_triton_2eproto;
};
// -------------------------------------------------------------------

class TritonAutotunedKernelCall final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jax_triton.TritonAutotunedKernelCall) */ {
 public:
  inline TritonAutotunedKernelCall() : TritonAutotunedKernelCall(nullptr) {}
  ~TritonAutotunedKernelCall() override;
  explicit PROTOBUF_CONSTEXPR TritonAutotunedKernelCall(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TritonAutotunedKernelCall(const TritonAutotunedKernelCall& from);
  TritonAutotunedKernelCall(TritonAutotunedKernelCall&& from) noexcept
    : TritonAutotunedKernelCall() {
    *this = ::std::move(from);
  }

  inline TritonAutotunedKernelCall& operator=(const TritonAutotunedKernelCall& from) {
    CopyFrom(from);
    return *this;
  }
  inline TritonAutotunedKernelCall& operator=(TritonAutotunedKernelCall&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TritonAutotunedKernelCall& default_instance() {
    return *internal_default_instance();
  }
  static inline const TritonAutotunedKernelCall* internal_default_instance() {
    return reinterpret_cast<const TritonAutotunedKernelCall*>(
               &_TritonAutotunedKernelCall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TritonAutotunedKernelCall& a, TritonAutotunedKernelCall& b) {
    a.Swap(&b);
  }
  inline void Swap(TritonAutotunedKernelCall* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TritonAutotunedKernelCall* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TritonAutotunedKernelCall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TritonAutotunedKernelCall>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TritonAutotunedKernelCall& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TritonAutotunedKernelCall& from) {
    TritonAutotunedKernelCall::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TritonAutotunedKernelCall* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jax_triton.TritonAutotunedKernelCall";
  }
  protected:
  explicit TritonAutotunedKernelCall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TritonAutotunedKernelCall_Config Config;
  typedef TritonAutotunedKernelCall_InputOutputAlias InputOutputAlias;

  // accessors -------------------------------------------------------

  enum : int {
    kConfigsFieldNumber = 2,
    kInputOutputAliasesFieldNumber = 3,
    kNameFieldNumber = 1,
  };
  // repeated .jax_triton.TritonAutotunedKernelCall.Config configs = 2;
  int configs_size() const;
  private:
  int _internal_configs_size() const;
  public:
  void clear_configs();
  ::jax_triton::TritonAutotunedKernelCall_Config* mutable_configs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jax_triton::TritonAutotunedKernelCall_Config >*
      mutable_configs();
  private:
  const ::jax_triton::TritonAutotunedKernelCall_Config& _internal_configs(int index) const;
  ::jax_triton::TritonAutotunedKernelCall_Config* _internal_add_configs();
  public:
  const ::jax_triton::TritonAutotunedKernelCall_Config& configs(int index) const;
  ::jax_triton::TritonAutotunedKernelCall_Config* add_configs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jax_triton::TritonAutotunedKernelCall_Config >&
      configs() const;

  // repeated .jax_triton.TritonAutotunedKernelCall.InputOutputAlias input_output_aliases = 3;
  int input_output_aliases_size() const;
  private:
  int _internal_input_output_aliases_size() const;
  public:
  void clear_input_output_aliases();
  ::jax_triton::TritonAutotunedKernelCall_InputOutputAlias* mutable_input_output_aliases(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jax_triton::TritonAutotunedKernelCall_InputOutputAlias >*
      mutable_input_output_aliases();
  private:
  const ::jax_triton::TritonAutotunedKernelCall_InputOutputAlias& _internal_input_output_aliases(int index) const;
  ::jax_triton::TritonAutotunedKernelCall_InputOutputAlias* _internal_add_input_output_aliases();
  public:
  const ::jax_triton::TritonAutotunedKernelCall_InputOutputAlias& input_output_aliases(int index) const;
  ::jax_triton::TritonAutotunedKernelCall_InputOutputAlias* add_input_output_aliases();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jax_triton::TritonAutotunedKernelCall_InputOutputAlias >&
      input_output_aliases() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:jax_triton.TritonAutotunedKernelCall)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jax_triton::TritonAutotunedKernelCall_Config > configs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jax_triton::TritonAutotunedKernelCall_InputOutputAlias > input_output_aliases_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_triton_2eproto;
};
// -------------------------------------------------------------------

class TritonAnyKernelCall final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jax_triton.TritonAnyKernelCall) */ {
 public:
  inline TritonAnyKernelCall() : TritonAnyKernelCall(nullptr) {}
  ~TritonAnyKernelCall() override;
  explicit PROTOBUF_CONSTEXPR TritonAnyKernelCall(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TritonAnyKernelCall(const TritonAnyKernelCall& from);
  TritonAnyKernelCall(TritonAnyKernelCall&& from) noexcept
    : TritonAnyKernelCall() {
    *this = ::std::move(from);
  }

  inline TritonAnyKernelCall& operator=(const TritonAnyKernelCall& from) {
    CopyFrom(from);
    return *this;
  }
  inline TritonAnyKernelCall& operator=(TritonAnyKernelCall&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TritonAnyKernelCall& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kKernelCall = 1,
    kAutotunedKernelCall = 2,
    VALUE_NOT_SET = 0,
  };

  static inline const TritonAnyKernelCall* internal_default_instance() {
    return reinterpret_cast<const TritonAnyKernelCall*>(
               &_TritonAnyKernelCall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TritonAnyKernelCall& a, TritonAnyKernelCall& b) {
    a.Swap(&b);
  }
  inline void Swap(TritonAnyKernelCall* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TritonAnyKernelCall* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TritonAnyKernelCall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TritonAnyKernelCall>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TritonAnyKernelCall& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TritonAnyKernelCall& from) {
    TritonAnyKernelCall::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TritonAnyKernelCall* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jax_triton.TritonAnyKernelCall";
  }
  protected:
  explicit TritonAnyKernelCall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 3,
    kNameFieldNumber = 4,
    kKernelCallFieldNumber = 1,
    kAutotunedKernelCallFieldNumber = 2,
  };
  // bytes metadata = 3;
  void clear_metadata();
  const std::string& metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // string name = 4;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .jax_triton.TritonKernelCall kernel_call = 1;
  bool has_kernel_call() const;
  private:
  bool _internal_has_kernel_call() const;
  public:
  void clear_kernel_call();
  const ::jax_triton::TritonKernelCall& kernel_call() const;
  PROTOBUF_NODISCARD ::jax_triton::TritonKernelCall* release_kernel_call();
  ::jax_triton::TritonKernelCall* mutable_kernel_call();
  void set_allocated_kernel_call(::jax_triton::TritonKernelCall* kernel_call);
  private:
  const ::jax_triton::TritonKernelCall& _internal_kernel_call() const;
  ::jax_triton::TritonKernelCall* _internal_mutable_kernel_call();
  public:
  void unsafe_arena_set_allocated_kernel_call(
      ::jax_triton::TritonKernelCall* kernel_call);
  ::jax_triton::TritonKernelCall* unsafe_arena_release_kernel_call();

  // .jax_triton.TritonAutotunedKernelCall autotuned_kernel_call = 2;
  bool has_autotuned_kernel_call() const;
  private:
  bool _internal_has_autotuned_kernel_call() const;
  public:
  void clear_autotuned_kernel_call();
  const ::jax_triton::TritonAutotunedKernelCall& autotuned_kernel_call() const;
  PROTOBUF_NODISCARD ::jax_triton::TritonAutotunedKernelCall* release_autotuned_kernel_call();
  ::jax_triton::TritonAutotunedKernelCall* mutable_autotuned_kernel_call();
  void set_allocated_autotuned_kernel_call(::jax_triton::TritonAutotunedKernelCall* autotuned_kernel_call);
  private:
  const ::jax_triton::TritonAutotunedKernelCall& _internal_autotuned_kernel_call() const;
  ::jax_triton::TritonAutotunedKernelCall* _internal_mutable_autotuned_kernel_call();
  public:
  void unsafe_arena_set_allocated_autotuned_kernel_call(
      ::jax_triton::TritonAutotunedKernelCall* autotuned_kernel_call);
  ::jax_triton::TritonAutotunedKernelCall* unsafe_arena_release_autotuned_kernel_call();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:jax_triton.TritonAnyKernelCall)
 private:
  class _Internal;
  void set_has_kernel_call();
  void set_has_autotuned_kernel_call();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::jax_triton::TritonKernelCall* kernel_call_;
      ::jax_triton::TritonAutotunedKernelCall* autotuned_kernel_call_;
    } value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_triton_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TritonKernel

// string kernel_name = 1;
inline void TritonKernel::clear_kernel_name() {
  _impl_.kernel_name_.ClearToEmpty();
}
inline const std::string& TritonKernel::kernel_name() const {
  // @@protoc_insertion_point(field_get:jax_triton.TritonKernel.kernel_name)
  return _internal_kernel_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TritonKernel::set_kernel_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.kernel_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:jax_triton.TritonKernel.kernel_name)
}
inline std::string* TritonKernel::mutable_kernel_name() {
  std::string* _s = _internal_mutable_kernel_name();
  // @@protoc_insertion_point(field_mutable:jax_triton.TritonKernel.kernel_name)
  return _s;
}
inline const std::string& TritonKernel::_internal_kernel_name() const {
  return _impl_.kernel_name_.Get();
}
inline void TritonKernel::_internal_set_kernel_name(const std::string& value) {
  
  _impl_.kernel_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TritonKernel::_internal_mutable_kernel_name() {
  
  return _impl_.kernel_name_.Mutable(GetArenaForAllocation());
}
inline std::string* TritonKernel::release_kernel_name() {
  // @@protoc_insertion_point(field_release:jax_triton.TritonKernel.kernel_name)
  return _impl_.kernel_name_.Release();
}
inline void TritonKernel::set_allocated_kernel_name(std::string* kernel_name) {
  if (kernel_name != nullptr) {
    
  } else {
    
  }
  _impl_.kernel_name_.SetAllocated(kernel_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.kernel_name_.IsDefault()) {
    _impl_.kernel_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:jax_triton.TritonKernel.kernel_name)
}

// uint32 num_warps = 2;
inline void TritonKernel::clear_num_warps() {
  _impl_.num_warps_ = 0u;
}
inline uint32_t TritonKernel::_internal_num_warps() const {
  return _impl_.num_warps_;
}
inline uint32_t TritonKernel::num_warps() const {
  // @@protoc_insertion_point(field_get:jax_triton.TritonKernel.num_warps)
  return _internal_num_warps();
}
inline void TritonKernel::_internal_set_num_warps(uint32_t value) {
  
  _impl_.num_warps_ = value;
}
inline void TritonKernel::set_num_warps(uint32_t value) {
  _internal_set_num_warps(value);
  // @@protoc_insertion_point(field_set:jax_triton.TritonKernel.num_warps)
}

// uint32 shared_mem_bytes = 3;
inline void TritonKernel::clear_shared_mem_bytes() {
  _impl_.shared_mem_bytes_ = 0u;
}
inline uint32_t TritonKernel::_internal_shared_mem_bytes() const {
  return _impl_.shared_mem_bytes_;
}
inline uint32_t TritonKernel::shared_mem_bytes() const {
  // @@protoc_insertion_point(field_get:jax_triton.TritonKernel.shared_mem_bytes)
  return _internal_shared_mem_bytes();
}
inline void TritonKernel::_internal_set_shared_mem_bytes(uint32_t value) {
  
  _impl_.shared_mem_bytes_ = value;
}
inline void TritonKernel::set_shared_mem_bytes(uint32_t value) {
  _internal_set_shared_mem_bytes(value);
  // @@protoc_insertion_point(field_set:jax_triton.TritonKernel.shared_mem_bytes)
}

// string ptx = 4;
inline void TritonKernel::clear_ptx() {
  _impl_.ptx_.ClearToEmpty();
}
inline const std::string& TritonKernel::ptx() const {
  // @@protoc_insertion_point(field_get:jax_triton.TritonKernel.ptx)
  return _internal_ptx();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TritonKernel::set_ptx(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ptx_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:jax_triton.TritonKernel.ptx)
}
inline std::string* TritonKernel::mutable_ptx() {
  std::string* _s = _internal_mutable_ptx();
  // @@protoc_insertion_point(field_mutable:jax_triton.TritonKernel.ptx)
  return _s;
}
inline const std::string& TritonKernel::_internal_ptx() const {
  return _impl_.ptx_.Get();
}
inline void TritonKernel::_internal_set_ptx(const std::string& value) {
  
  _impl_.ptx_.Set(value, GetArenaForAllocation());
}
inline std::string* TritonKernel::_internal_mutable_ptx() {
  
  return _impl_.ptx_.Mutable(GetArenaForAllocation());
}
inline std::string* TritonKernel::release_ptx() {
  // @@protoc_insertion_point(field_release:jax_triton.TritonKernel.ptx)
  return _impl_.ptx_.Release();
}
inline void TritonKernel::set_allocated_ptx(std::string* ptx) {
  if (ptx != nullptr) {
    
  } else {
    
  }
  _impl_.ptx_.SetAllocated(ptx, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ptx_.IsDefault()) {
    _impl_.ptx_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:jax_triton.TritonKernel.ptx)
}

// string ttir = 5;
inline void TritonKernel::clear_ttir() {
  _impl_.ttir_.ClearToEmpty();
}
inline const std::string& TritonKernel::ttir() const {
  // @@protoc_insertion_point(field_get:jax_triton.TritonKernel.ttir)
  return _internal_ttir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TritonKernel::set_ttir(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ttir_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:jax_triton.TritonKernel.ttir)
}
inline std::string* TritonKernel::mutable_ttir() {
  std::string* _s = _internal_mutable_ttir();
  // @@protoc_insertion_point(field_mutable:jax_triton.TritonKernel.ttir)
  return _s;
}
inline const std::string& TritonKernel::_internal_ttir() const {
  return _impl_.ttir_.Get();
}
inline void TritonKernel::_internal_set_ttir(const std::string& value) {
  
  _impl_.ttir_.Set(value, GetArenaForAllocation());
}
inline std::string* TritonKernel::_internal_mutable_ttir() {
  
  return _impl_.ttir_.Mutable(GetArenaForAllocation());
}
inline std::string* TritonKernel::release_ttir() {
  // @@protoc_insertion_point(field_release:jax_triton.TritonKernel.ttir)
  return _impl_.ttir_.Release();
}
inline void TritonKernel::set_allocated_ttir(std::string* ttir) {
  if (ttir != nullptr) {
    
  } else {
    
  }
  _impl_.ttir_.SetAllocated(ttir, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ttir_.IsDefault()) {
    _impl_.ttir_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:jax_triton.TritonKernel.ttir)
}

// uint32 compute_capability = 6;
inline void TritonKernel::clear_compute_capability() {
  _impl_.compute_capability_ = 0u;
}
inline uint32_t TritonKernel::_internal_compute_capability() const {
  return _impl_.compute_capability_;
}
inline uint32_t TritonKernel::compute_capability() const {
  // @@protoc_insertion_point(field_get:jax_triton.TritonKernel.compute_capability)
  return _internal_compute_capability();
}
inline void TritonKernel::_internal_set_compute_capability(uint32_t value) {
  
  _impl_.compute_capability_ = value;
}
inline void TritonKernel::set_compute_capability(uint32_t value) {
  _internal_set_compute_capability(value);
  // @@protoc_insertion_point(field_set:jax_triton.TritonKernel.compute_capability)
}

// uint32 cluster_dim_0 = 7;
inline void TritonKernel::clear_cluster_dim_0() {
  _impl_.cluster_dim_0_ = 0u;
}
inline uint32_t TritonKernel::_internal_cluster_dim_0() const {
  return _impl_.cluster_dim_0_;
}
inline uint32_t TritonKernel::cluster_dim_0() const {
  // @@protoc_insertion_point(field_get:jax_triton.TritonKernel.cluster_dim_0)
  return _internal_cluster_dim_0();
}
inline void TritonKernel::_internal_set_cluster_dim_0(uint32_t value) {
  
  _impl_.cluster_dim_0_ = value;
}
inline void TritonKernel::set_cluster_dim_0(uint32_t value) {
  _internal_set_cluster_dim_0(value);
  // @@protoc_insertion_point(field_set:jax_triton.TritonKernel.cluster_dim_0)
}

// uint32 cluster_dim_1 = 8;
inline void TritonKernel::clear_cluster_dim_1() {
  _impl_.cluster_dim_1_ = 0u;
}
inline uint32_t TritonKernel::_internal_cluster_dim_1() const {
  return _impl_.cluster_dim_1_;
}
inline uint32_t TritonKernel::cluster_dim_1() const {
  // @@protoc_insertion_point(field_get:jax_triton.TritonKernel.cluster_dim_1)
  return _internal_cluster_dim_1();
}
inline void TritonKernel::_internal_set_cluster_dim_1(uint32_t value) {
  
  _impl_.cluster_dim_1_ = value;
}
inline void TritonKernel::set_cluster_dim_1(uint32_t value) {
  _internal_set_cluster_dim_1(value);
  // @@protoc_insertion_point(field_set:jax_triton.TritonKernel.cluster_dim_1)
}

// uint32 cluster_dim_2 = 9;
inline void TritonKernel::clear_cluster_dim_2() {
  _impl_.cluster_dim_2_ = 0u;
}
inline uint32_t TritonKernel::_internal_cluster_dim_2() const {
  return _impl_.cluster_dim_2_;
}
inline uint32_t TritonKernel::cluster_dim_2() const {
  // @@protoc_insertion_point(field_get:jax_triton.TritonKernel.cluster_dim_2)
  return _internal_cluster_dim_2();
}
inline void TritonKernel::_internal_set_cluster_dim_2(uint32_t value) {
  
  _impl_.cluster_dim_2_ = value;
}
inline void TritonKernel::set_cluster_dim_2(uint32_t value) {
  _internal_set_cluster_dim_2(value);
  // @@protoc_insertion_point(field_set:jax_triton.TritonKernel.cluster_dim_2)
}

// -------------------------------------------------------------------

// TritonKernelCall_Parameter_Array

// uint64 bytes_to_zero = 1;
inline void TritonKernelCall_Parameter_Array::clear_bytes_to_zero() {
  _impl_.bytes_to_zero_ = uint64_t{0u};
}
inline uint64_t TritonKernelCall_Parameter_Array::_internal_bytes_to_zero() const {
  return _impl_.bytes_to_zero_;
}
inline uint64_t TritonKernelCall_Parameter_Array::bytes_to_zero() const {
  // @@protoc_insertion_point(field_get:jax_triton.TritonKernelCall.Parameter.Array.bytes_to_zero)
  return _internal_bytes_to_zero();
}
inline void TritonKernelCall_Parameter_Array::_internal_set_bytes_to_zero(uint64_t value) {
  
  _impl_.bytes_to_zero_ = value;
}
inline void TritonKernelCall_Parameter_Array::set_bytes_to_zero(uint64_t value) {
  _internal_set_bytes_to_zero(value);
  // @@protoc_insertion_point(field_set:jax_triton.TritonKernelCall.Parameter.Array.bytes_to_zero)
}

// uint64 ptr_divisibility = 2;
inline void TritonKernelCall_Parameter_Array::clear_ptr_divisibility() {
  _impl_.ptr_divisibility_ = uint64_t{0u};
}
inline uint64_t TritonKernelCall_Parameter_Array::_internal_ptr_divisibility() const {
  return _impl_.ptr_divisibility_;
}
inline uint64_t TritonKernelCall_Parameter_Array::ptr_divisibility() const {
  // @@protoc_insertion_point(field_get:jax_triton.TritonKernelCall.Parameter.Array.ptr_divisibility)
  return _internal_ptr_divisibility();
}
inline void TritonKernelCall_Parameter_Array::_internal_set_ptr_divisibility(uint64_t value) {
  
  _impl_.ptr_divisibility_ = value;
}
inline void TritonKernelCall_Parameter_Array::set_ptr_divisibility(uint64_t value) {
  _internal_set_ptr_divisibility(value);
  // @@protoc_insertion_point(field_set:jax_triton.TritonKernelCall.Parameter.Array.ptr_divisibility)
}

// -------------------------------------------------------------------

// TritonKernelCall_Parameter

// .jax_triton.TritonKernelCall.Parameter.Array array = 1;
inline bool TritonKernelCall_Parameter::_internal_has_array() const {
  return value_case() == kArray;
}
inline bool TritonKernelCall_Parameter::has_array() const {
  return _internal_has_array();
}
inline void TritonKernelCall_Parameter::set_has_array() {
  _impl_._oneof_case_[0] = kArray;
}
inline void TritonKernelCall_Parameter::clear_array() {
  if (_internal_has_array()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.array_;
    }
    clear_has_value();
  }
}
inline ::jax_triton::TritonKernelCall_Parameter_Array* TritonKernelCall_Parameter::release_array() {
  // @@protoc_insertion_point(field_release:jax_triton.TritonKernelCall.Parameter.array)
  if (_internal_has_array()) {
    clear_has_value();
    ::jax_triton::TritonKernelCall_Parameter_Array* temp = _impl_.value_.array_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::jax_triton::TritonKernelCall_Parameter_Array& TritonKernelCall_Parameter::_internal_array() const {
  return _internal_has_array()
      ? *_impl_.value_.array_
      : reinterpret_cast< ::jax_triton::TritonKernelCall_Parameter_Array&>(::jax_triton::_TritonKernelCall_Parameter_Array_default_instance_);
}
inline const ::jax_triton::TritonKernelCall_Parameter_Array& TritonKernelCall_Parameter::array() const {
  // @@protoc_insertion_point(field_get:jax_triton.TritonKernelCall.Parameter.array)
  return _internal_array();
}
inline ::jax_triton::TritonKernelCall_Parameter_Array* TritonKernelCall_Parameter::unsafe_arena_release_array() {
  // @@protoc_insertion_point(field_unsafe_arena_release:jax_triton.TritonKernelCall.Parameter.array)
  if (_internal_has_array()) {
    clear_has_value();
    ::jax_triton::TritonKernelCall_Parameter_Array* temp = _impl_.value_.array_;
    _impl_.value_.array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TritonKernelCall_Parameter::unsafe_arena_set_allocated_array(::jax_triton::TritonKernelCall_Parameter_Array* array) {
  clear_value();
  if (array) {
    set_has_array();
    _impl_.value_.array_ = array;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jax_triton.TritonKernelCall.Parameter.array)
}
inline ::jax_triton::TritonKernelCall_Parameter_Array* TritonKernelCall_Parameter::_internal_mutable_array() {
  if (!_internal_has_array()) {
    clear_value();
    set_has_array();
    _impl_.value_.array_ = CreateMaybeMessage< ::jax_triton::TritonKernelCall_Parameter_Array >(GetArenaForAllocation());
  }
  return _impl_.value_.array_;
}
inline ::jax_triton::TritonKernelCall_Parameter_Array* TritonKernelCall_Parameter::mutable_array() {
  ::jax_triton::TritonKernelCall_Parameter_Array* _msg = _internal_mutable_array();
  // @@protoc_insertion_point(field_mutable:jax_triton.TritonKernelCall.Parameter.array)
  return _msg;
}

// bool bool_ = 2;
inline bool TritonKernelCall_Parameter::_internal_has_bool_() const {
  return value_case() == kBool;
}
inline bool TritonKernelCall_Parameter::has_bool_() const {
  return _internal_has_bool_();
}
inline void TritonKernelCall_Parameter::set_has_bool_() {
  _impl_._oneof_case_[0] = kBool;
}
inline void TritonKernelCall_Parameter::clear_bool_() {
  if (_internal_has_bool_()) {
    _impl_.value_.bool__ = false;
    clear_has_value();
  }
}
inline bool TritonKernelCall_Parameter::_internal_bool_() const {
  if (_internal_has_bool_()) {
    return _impl_.value_.bool__;
  }
  return false;
}
inline void TritonKernelCall_Parameter::_internal_set_bool_(bool value) {
  if (!_internal_has_bool_()) {
    clear_value();
    set_has_bool_();
  }
  _impl_.value_.bool__ = value;
}
inline bool TritonKernelCall_Parameter::bool_() const {
  // @@protoc_insertion_point(field_get:jax_triton.TritonKernelCall.Parameter.bool_)
  return _internal_bool_();
}
inline void TritonKernelCall_Parameter::set_bool_(bool value) {
  _internal_set_bool_(value);
  // @@protoc_insertion_point(field_set:jax_triton.TritonKernelCall.Parameter.bool_)
}

// int32 i32 = 3;
inline bool TritonKernelCall_Parameter::_internal_has_i32() const {
  return value_case() == kI32;
}
inline bool TritonKernelCall_Parameter::has_i32() const {
  return _internal_has_i32();
}
inline void TritonKernelCall_Parameter::set_has_i32() {
  _impl_._oneof_case_[0] = kI32;
}
inline void TritonKernelCall_Parameter::clear_i32() {
  if (_internal_has_i32()) {
    _impl_.value_.i32_ = 0;
    clear_has_value();
  }
}
inline int32_t TritonKernelCall_Parameter::_internal_i32() const {
  if (_internal_has_i32()) {
    return _impl_.value_.i32_;
  }
  return 0;
}
inline void TritonKernelCall_Parameter::_internal_set_i32(int32_t value) {
  if (!_internal_has_i32()) {
    clear_value();
    set_has_i32();
  }
  _impl_.value_.i32_ = value;
}
inline int32_t TritonKernelCall_Parameter::i32() const {
  // @@protoc_insertion_point(field_get:jax_triton.TritonKernelCall.Parameter.i32)
  return _internal_i32();
}
inline void TritonKernelCall_Parameter::set_i32(int32_t value) {
  _internal_set_i32(value);
  // @@protoc_insertion_point(field_set:jax_triton.TritonKernelCall.Parameter.i32)
}

// uint32 u32 = 4;
inline bool TritonKernelCall_Parameter::_internal_has_u32() const {
  return value_case() == kU32;
}
inline bool TritonKernelCall_Parameter::has_u32() const {
  return _internal_has_u32();
}
inline void TritonKernelCall_Parameter::set_has_u32() {
  _impl_._oneof_case_[0] = kU32;
}
inline void TritonKernelCall_Parameter::clear_u32() {
  if (_internal_has_u32()) {
    _impl_.value_.u32_ = 0u;
    clear_has_value();
  }
}
inline uint32_t TritonKernelCall_Parameter::_internal_u32() const {
  if (_internal_has_u32()) {
    return _impl_.value_.u32_;
  }
  return 0u;
}
inline void TritonKernelCall_Parameter::_internal_set_u32(uint32_t value) {
  if (!_internal_has_u32()) {
    clear_value();
    set_has_u32();
  }
  _impl_.value_.u32_ = value;
}
inline uint32_t TritonKernelCall_Parameter::u32() const {
  // @@protoc_insertion_point(field_get:jax_triton.TritonKernelCall.Parameter.u32)
  return _internal_u32();
}
inline void TritonKernelCall_Parameter::set_u32(uint32_t value) {
  _internal_set_u32(value);
  // @@protoc_insertion_point(field_set:jax_triton.TritonKernelCall.Parameter.u32)
}

// int64 i64 = 5;
inline bool TritonKernelCall_Parameter::_internal_has_i64() const {
  return value_case() == kI64;
}
inline bool TritonKernelCall_Parameter::has_i64() const {
  return _internal_has_i64();
}
inline void TritonKernelCall_Parameter::set_has_i64() {
  _impl_._oneof_case_[0] = kI64;
}
inline void TritonKernelCall_Parameter::clear_i64() {
  if (_internal_has_i64()) {
    _impl_.value_.i64_ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t TritonKernelCall_Parameter::_internal_i64() const {
  if (_internal_has_i64()) {
    return _impl_.value_.i64_;
  }
  return int64_t{0};
}
inline void TritonKernelCall_Parameter::_internal_set_i64(int64_t value) {
  if (!_internal_has_i64()) {
    clear_value();
    set_has_i64();
  }
  _impl_.value_.i64_ = value;
}
inline int64_t TritonKernelCall_Parameter::i64() const {
  // @@protoc_insertion_point(field_get:jax_triton.TritonKernelCall.Parameter.i64)
  return _internal_i64();
}
inline void TritonKernelCall_Parameter::set_i64(int64_t value) {
  _internal_set_i64(value);
  // @@protoc_insertion_point(field_set:jax_triton.TritonKernelCall.Parameter.i64)
}

// uint64 u64 = 6;
inline bool TritonKernelCall_Parameter::_internal_has_u64() const {
  return value_case() == kU64;
}
inline bool TritonKernelCall_Parameter::has_u64() const {
  return _internal_has_u64();
}
inline void TritonKernelCall_Parameter::set_has_u64() {
  _impl_._oneof_case_[0] = kU64;
}
inline void TritonKernelCall_Parameter::clear_u64() {
  if (_internal_has_u64()) {
    _impl_.value_.u64_ = uint64_t{0u};
    clear_has_value();
  }
}
inline uint64_t TritonKernelCall_Parameter::_internal_u64() const {
  if (_internal_has_u64()) {
    return _impl_.value_.u64_;
  }
  return uint64_t{0u};
}
inline void TritonKernelCall_Parameter::_internal_set_u64(uint64_t value) {
  if (!_internal_has_u64()) {
    clear_value();
    set_has_u64();
  }
  _impl_.value_.u64_ = value;
}
inline uint64_t TritonKernelCall_Parameter::u64() const {
  // @@protoc_insertion_point(field_get:jax_triton.TritonKernelCall.Parameter.u64)
  return _internal_u64();
}
inline void TritonKernelCall_Parameter::set_u64(uint64_t value) {
  _internal_set_u64(value);
  // @@protoc_insertion_point(field_set:jax_triton.TritonKernelCall.Parameter.u64)
}

// float f32 = 7;
inline bool TritonKernelCall_Parameter::_internal_has_f32() const {
  return value_case() == kF32;
}
inline bool TritonKernelCall_Parameter::has_f32() const {
  return _internal_has_f32();
}
inline void TritonKernelCall_Parameter::set_has_f32() {
  _impl_._oneof_case_[0] = kF32;
}
inline void TritonKernelCall_Parameter::clear_f32() {
  if (_internal_has_f32()) {
    _impl_.value_.f32_ = 0;
    clear_has_value();
  }
}
inline float TritonKernelCall_Parameter::_internal_f32() const {
  if (_internal_has_f32()) {
    return _impl_.value_.f32_;
  }
  return 0;
}
inline void TritonKernelCall_Parameter::_internal_set_f32(float value) {
  if (!_internal_has_f32()) {
    clear_value();
    set_has_f32();
  }
  _impl_.value_.f32_ = value;
}
inline float TritonKernelCall_Parameter::f32() const {
  // @@protoc_insertion_point(field_get:jax_triton.TritonKernelCall.Parameter.f32)
  return _internal_f32();
}
inline void TritonKernelCall_Parameter::set_f32(float value) {
  _internal_set_f32(value);
  // @@protoc_insertion_point(field_set:jax_triton.TritonKernelCall.Parameter.f32)
}

// double f64 = 8;
inline bool TritonKernelCall_Parameter::_internal_has_f64() const {
  return value_case() == kF64;
}
inline bool TritonKernelCall_Parameter::has_f64() const {
  return _internal_has_f64();
}
inline void TritonKernelCall_Parameter::set_has_f64() {
  _impl_._oneof_case_[0] = kF64;
}
inline void TritonKernelCall_Parameter::clear_f64() {
  if (_internal_has_f64()) {
    _impl_.value_.f64_ = 0;
    clear_has_value();
  }
}
inline double TritonKernelCall_Parameter::_internal_f64() const {
  if (_internal_has_f64()) {
    return _impl_.value_.f64_;
  }
  return 0;
}
inline void TritonKernelCall_Parameter::_internal_set_f64(double value) {
  if (!_internal_has_f64()) {
    clear_value();
    set_has_f64();
  }
  _impl_.value_.f64_ = value;
}
inline double TritonKernelCall_Parameter::f64() const {
  // @@protoc_insertion_point(field_get:jax_triton.TritonKernelCall.Parameter.f64)
  return _internal_f64();
}
inline void TritonKernelCall_Parameter::set_f64(double value) {
  _internal_set_f64(value);
  // @@protoc_insertion_point(field_set:jax_triton.TritonKernelCall.Parameter.f64)
}

inline bool TritonKernelCall_Parameter::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void TritonKernelCall_Parameter::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline TritonKernelCall_Parameter::ValueCase TritonKernelCall_Parameter::value_case() const {
  return TritonKernelCall_Parameter::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// TritonKernelCall

// .jax_triton.TritonKernel kernel = 1;
inline bool TritonKernelCall::_internal_has_kernel() const {
  return this != internal_default_instance() && _impl_.kernel_ != nullptr;
}
inline bool TritonKernelCall::has_kernel() const {
  return _internal_has_kernel();
}
inline void TritonKernelCall::clear_kernel() {
  if (GetArenaForAllocation() == nullptr && _impl_.kernel_ != nullptr) {
    delete _impl_.kernel_;
  }
  _impl_.kernel_ = nullptr;
}
inline const ::jax_triton::TritonKernel& TritonKernelCall::_internal_kernel() const {
  const ::jax_triton::TritonKernel* p = _impl_.kernel_;
  return p != nullptr ? *p : reinterpret_cast<const ::jax_triton::TritonKernel&>(
      ::jax_triton::_TritonKernel_default_instance_);
}
inline const ::jax_triton::TritonKernel& TritonKernelCall::kernel() const {
  // @@protoc_insertion_point(field_get:jax_triton.TritonKernelCall.kernel)
  return _internal_kernel();
}
inline void TritonKernelCall::unsafe_arena_set_allocated_kernel(
    ::jax_triton::TritonKernel* kernel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kernel_);
  }
  _impl_.kernel_ = kernel;
  if (kernel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jax_triton.TritonKernelCall.kernel)
}
inline ::jax_triton::TritonKernel* TritonKernelCall::release_kernel() {
  
  ::jax_triton::TritonKernel* temp = _impl_.kernel_;
  _impl_.kernel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::jax_triton::TritonKernel* TritonKernelCall::unsafe_arena_release_kernel() {
  // @@protoc_insertion_point(field_release:jax_triton.TritonKernelCall.kernel)
  
  ::jax_triton::TritonKernel* temp = _impl_.kernel_;
  _impl_.kernel_ = nullptr;
  return temp;
}
inline ::jax_triton::TritonKernel* TritonKernelCall::_internal_mutable_kernel() {
  
  if (_impl_.kernel_ == nullptr) {
    auto* p = CreateMaybeMessage<::jax_triton::TritonKernel>(GetArenaForAllocation());
    _impl_.kernel_ = p;
  }
  return _impl_.kernel_;
}
inline ::jax_triton::TritonKernel* TritonKernelCall::mutable_kernel() {
  ::jax_triton::TritonKernel* _msg = _internal_mutable_kernel();
  // @@protoc_insertion_point(field_mutable:jax_triton.TritonKernelCall.kernel)
  return _msg;
}
inline void TritonKernelCall::set_allocated_kernel(::jax_triton::TritonKernel* kernel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.kernel_;
  }
  if (kernel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(kernel);
    if (message_arena != submessage_arena) {
      kernel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kernel, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.kernel_ = kernel;
  // @@protoc_insertion_point(field_set_allocated:jax_triton.TritonKernelCall.kernel)
}

// uint32 grid_0 = 2;
inline void TritonKernelCall::clear_grid_0() {
  _impl_.grid_0_ = 0u;
}
inline uint32_t TritonKernelCall::_internal_grid_0() const {
  return _impl_.grid_0_;
}
inline uint32_t TritonKernelCall::grid_0() const {
  // @@protoc_insertion_point(field_get:jax_triton.TritonKernelCall.grid_0)
  return _internal_grid_0();
}
inline void TritonKernelCall::_internal_set_grid_0(uint32_t value) {
  
  _impl_.grid_0_ = value;
}
inline void TritonKernelCall::set_grid_0(uint32_t value) {
  _internal_set_grid_0(value);
  // @@protoc_insertion_point(field_set:jax_triton.TritonKernelCall.grid_0)
}

// uint32 grid_1 = 3;
inline void TritonKernelCall::clear_grid_1() {
  _impl_.grid_1_ = 0u;
}
inline uint32_t TritonKernelCall::_internal_grid_1() const {
  return _impl_.grid_1_;
}
inline uint32_t TritonKernelCall::grid_1() const {
  // @@protoc_insertion_point(field_get:jax_triton.TritonKernelCall.grid_1)
  return _internal_grid_1();
}
inline void TritonKernelCall::_internal_set_grid_1(uint32_t value) {
  
  _impl_.grid_1_ = value;
}
inline void TritonKernelCall::set_grid_1(uint32_t value) {
  _internal_set_grid_1(value);
  // @@protoc_insertion_point(field_set:jax_triton.TritonKernelCall.grid_1)
}

// uint32 grid_2 = 4;
inline void TritonKernelCall::clear_grid_2() {
  _impl_.grid_2_ = 0u;
}
inline uint32_t TritonKernelCall::_internal_grid_2() const {
  return _impl_.grid_2_;
}
inline uint32_t TritonKernelCall::grid_2() const {
  // @@protoc_insertion_point(field_get:jax_triton.TritonKernelCall.grid_2)
  return _internal_grid_2();
}
inline void TritonKernelCall::_internal_set_grid_2(uint32_t value) {
  
  _impl_.grid_2_ = value;
}
inline void TritonKernelCall::set_grid_2(uint32_t value) {
  _internal_set_grid_2(value);
  // @@protoc_insertion_point(field_set:jax_triton.TritonKernelCall.grid_2)
}

// repeated .jax_triton.TritonKernelCall.Parameter parameters = 5;
inline int TritonKernelCall::_internal_parameters_size() const {
  return _impl_.parameters_.size();
}
inline int TritonKernelCall::parameters_size() const {
  return _internal_parameters_size();
}
inline void TritonKernelCall::clear_parameters() {
  _impl_.parameters_.Clear();
}
inline ::jax_triton::TritonKernelCall_Parameter* TritonKernelCall::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:jax_triton.TritonKernelCall.parameters)
  return _impl_.parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jax_triton::TritonKernelCall_Parameter >*
TritonKernelCall::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:jax_triton.TritonKernelCall.parameters)
  return &_impl_.parameters_;
}
inline const ::jax_triton::TritonKernelCall_Parameter& TritonKernelCall::_internal_parameters(int index) const {
  return _impl_.parameters_.Get(index);
}
inline const ::jax_triton::TritonKernelCall_Parameter& TritonKernelCall::parameters(int index) const {
  // @@protoc_insertion_point(field_get:jax_triton.TritonKernelCall.parameters)
  return _internal_parameters(index);
}
inline ::jax_triton::TritonKernelCall_Parameter* TritonKernelCall::_internal_add_parameters() {
  return _impl_.parameters_.Add();
}
inline ::jax_triton::TritonKernelCall_Parameter* TritonKernelCall::add_parameters() {
  ::jax_triton::TritonKernelCall_Parameter* _add = _internal_add_parameters();
  // @@protoc_insertion_point(field_add:jax_triton.TritonKernelCall.parameters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jax_triton::TritonKernelCall_Parameter >&
TritonKernelCall::parameters() const {
  // @@protoc_insertion_point(field_list:jax_triton.TritonKernelCall.parameters)
  return _impl_.parameters_;
}

// -------------------------------------------------------------------

// TritonAutotunedKernelCall_Config

// .jax_triton.TritonKernelCall kernel_call = 1;
inline bool TritonAutotunedKernelCall_Config::_internal_has_kernel_call() const {
  return this != internal_default_instance() && _impl_.kernel_call_ != nullptr;
}
inline bool TritonAutotunedKernelCall_Config::has_kernel_call() const {
  return _internal_has_kernel_call();
}
inline void TritonAutotunedKernelCall_Config::clear_kernel_call() {
  if (GetArenaForAllocation() == nullptr && _impl_.kernel_call_ != nullptr) {
    delete _impl_.kernel_call_;
  }
  _impl_.kernel_call_ = nullptr;
}
inline const ::jax_triton::TritonKernelCall& TritonAutotunedKernelCall_Config::_internal_kernel_call() const {
  const ::jax_triton::TritonKernelCall* p = _impl_.kernel_call_;
  return p != nullptr ? *p : reinterpret_cast<const ::jax_triton::TritonKernelCall&>(
      ::jax_triton::_TritonKernelCall_default_instance_);
}
inline const ::jax_triton::TritonKernelCall& TritonAutotunedKernelCall_Config::kernel_call() const {
  // @@protoc_insertion_point(field_get:jax_triton.TritonAutotunedKernelCall.Config.kernel_call)
  return _internal_kernel_call();
}
inline void TritonAutotunedKernelCall_Config::unsafe_arena_set_allocated_kernel_call(
    ::jax_triton::TritonKernelCall* kernel_call) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kernel_call_);
  }
  _impl_.kernel_call_ = kernel_call;
  if (kernel_call) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jax_triton.TritonAutotunedKernelCall.Config.kernel_call)
}
inline ::jax_triton::TritonKernelCall* TritonAutotunedKernelCall_Config::release_kernel_call() {
  
  ::jax_triton::TritonKernelCall* temp = _impl_.kernel_call_;
  _impl_.kernel_call_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::jax_triton::TritonKernelCall* TritonAutotunedKernelCall_Config::unsafe_arena_release_kernel_call() {
  // @@protoc_insertion_point(field_release:jax_triton.TritonAutotunedKernelCall.Config.kernel_call)
  
  ::jax_triton::TritonKernelCall* temp = _impl_.kernel_call_;
  _impl_.kernel_call_ = nullptr;
  return temp;
}
inline ::jax_triton::TritonKernelCall* TritonAutotunedKernelCall_Config::_internal_mutable_kernel_call() {
  
  if (_impl_.kernel_call_ == nullptr) {
    auto* p = CreateMaybeMessage<::jax_triton::TritonKernelCall>(GetArenaForAllocation());
    _impl_.kernel_call_ = p;
  }
  return _impl_.kernel_call_;
}
inline ::jax_triton::TritonKernelCall* TritonAutotunedKernelCall_Config::mutable_kernel_call() {
  ::jax_triton::TritonKernelCall* _msg = _internal_mutable_kernel_call();
  // @@protoc_insertion_point(field_mutable:jax_triton.TritonAutotunedKernelCall.Config.kernel_call)
  return _msg;
}
inline void TritonAutotunedKernelCall_Config::set_allocated_kernel_call(::jax_triton::TritonKernelCall* kernel_call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.kernel_call_;
  }
  if (kernel_call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(kernel_call);
    if (message_arena != submessage_arena) {
      kernel_call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kernel_call, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.kernel_call_ = kernel_call;
  // @@protoc_insertion_point(field_set_allocated:jax_triton.TritonAutotunedKernelCall.Config.kernel_call)
}

// string description = 2;
inline void TritonAutotunedKernelCall_Config::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& TritonAutotunedKernelCall_Config::description() const {
  // @@protoc_insertion_point(field_get:jax_triton.TritonAutotunedKernelCall.Config.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TritonAutotunedKernelCall_Config::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:jax_triton.TritonAutotunedKernelCall.Config.description)
}
inline std::string* TritonAutotunedKernelCall_Config::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:jax_triton.TritonAutotunedKernelCall.Config.description)
  return _s;
}
inline const std::string& TritonAutotunedKernelCall_Config::_internal_description() const {
  return _impl_.description_.Get();
}
inline void TritonAutotunedKernelCall_Config::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* TritonAutotunedKernelCall_Config::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* TritonAutotunedKernelCall_Config::release_description() {
  // @@protoc_insertion_point(field_release:jax_triton.TritonAutotunedKernelCall.Config.description)
  return _impl_.description_.Release();
}
inline void TritonAutotunedKernelCall_Config::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:jax_triton.TritonAutotunedKernelCall.Config.description)
}

// -------------------------------------------------------------------

// TritonAutotunedKernelCall_InputOutputAlias

// uint32 input_buffer_idx = 1;
inline void TritonAutotunedKernelCall_InputOutputAlias::clear_input_buffer_idx() {
  _impl_.input_buffer_idx_ = 0u;
}
inline uint32_t TritonAutotunedKernelCall_InputOutputAlias::_internal_input_buffer_idx() const {
  return _impl_.input_buffer_idx_;
}
inline uint32_t TritonAutotunedKernelCall_InputOutputAlias::input_buffer_idx() const {
  // @@protoc_insertion_point(field_get:jax_triton.TritonAutotunedKernelCall.InputOutputAlias.input_buffer_idx)
  return _internal_input_buffer_idx();
}
inline void TritonAutotunedKernelCall_InputOutputAlias::_internal_set_input_buffer_idx(uint32_t value) {
  
  _impl_.input_buffer_idx_ = value;
}
inline void TritonAutotunedKernelCall_InputOutputAlias::set_input_buffer_idx(uint32_t value) {
  _internal_set_input_buffer_idx(value);
  // @@protoc_insertion_point(field_set:jax_triton.TritonAutotunedKernelCall.InputOutputAlias.input_buffer_idx)
}

// uint32 output_buffer_idx = 2;
inline void TritonAutotunedKernelCall_InputOutputAlias::clear_output_buffer_idx() {
  _impl_.output_buffer_idx_ = 0u;
}
inline uint32_t TritonAutotunedKernelCall_InputOutputAlias::_internal_output_buffer_idx() const {
  return _impl_.output_buffer_idx_;
}
inline uint32_t TritonAutotunedKernelCall_InputOutputAlias::output_buffer_idx() const {
  // @@protoc_insertion_point(field_get:jax_triton.TritonAutotunedKernelCall.InputOutputAlias.output_buffer_idx)
  return _internal_output_buffer_idx();
}
inline void TritonAutotunedKernelCall_InputOutputAlias::_internal_set_output_buffer_idx(uint32_t value) {
  
  _impl_.output_buffer_idx_ = value;
}
inline void TritonAutotunedKernelCall_InputOutputAlias::set_output_buffer_idx(uint32_t value) {
  _internal_set_output_buffer_idx(value);
  // @@protoc_insertion_point(field_set:jax_triton.TritonAutotunedKernelCall.InputOutputAlias.output_buffer_idx)
}

// uint64 buffer_size_bytes = 3;
inline void TritonAutotunedKernelCall_InputOutputAlias::clear_buffer_size_bytes() {
  _impl_.buffer_size_bytes_ = uint64_t{0u};
}
inline uint64_t TritonAutotunedKernelCall_InputOutputAlias::_internal_buffer_size_bytes() const {
  return _impl_.buffer_size_bytes_;
}
inline uint64_t TritonAutotunedKernelCall_InputOutputAlias::buffer_size_bytes() const {
  // @@protoc_insertion_point(field_get:jax_triton.TritonAutotunedKernelCall.InputOutputAlias.buffer_size_bytes)
  return _internal_buffer_size_bytes();
}
inline void TritonAutotunedKernelCall_InputOutputAlias::_internal_set_buffer_size_bytes(uint64_t value) {
  
  _impl_.buffer_size_bytes_ = value;
}
inline void TritonAutotunedKernelCall_InputOutputAlias::set_buffer_size_bytes(uint64_t value) {
  _internal_set_buffer_size_bytes(value);
  // @@protoc_insertion_point(field_set:jax_triton.TritonAutotunedKernelCall.InputOutputAlias.buffer_size_bytes)
}

// -------------------------------------------------------------------

// TritonAutotunedKernelCall

// string name = 1;
inline void TritonAutotunedKernelCall::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& TritonAutotunedKernelCall::name() const {
  // @@protoc_insertion_point(field_get:jax_triton.TritonAutotunedKernelCall.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TritonAutotunedKernelCall::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:jax_triton.TritonAutotunedKernelCall.name)
}
inline std::string* TritonAutotunedKernelCall::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:jax_triton.TritonAutotunedKernelCall.name)
  return _s;
}
inline const std::string& TritonAutotunedKernelCall::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TritonAutotunedKernelCall::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TritonAutotunedKernelCall::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TritonAutotunedKernelCall::release_name() {
  // @@protoc_insertion_point(field_release:jax_triton.TritonAutotunedKernelCall.name)
  return _impl_.name_.Release();
}
inline void TritonAutotunedKernelCall::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:jax_triton.TritonAutotunedKernelCall.name)
}

// repeated .jax_triton.TritonAutotunedKernelCall.Config configs = 2;
inline int TritonAutotunedKernelCall::_internal_configs_size() const {
  return _impl_.configs_.size();
}
inline int TritonAutotunedKernelCall::configs_size() const {
  return _internal_configs_size();
}
inline void TritonAutotunedKernelCall::clear_configs() {
  _impl_.configs_.Clear();
}
inline ::jax_triton::TritonAutotunedKernelCall_Config* TritonAutotunedKernelCall::mutable_configs(int index) {
  // @@protoc_insertion_point(field_mutable:jax_triton.TritonAutotunedKernelCall.configs)
  return _impl_.configs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jax_triton::TritonAutotunedKernelCall_Config >*
TritonAutotunedKernelCall::mutable_configs() {
  // @@protoc_insertion_point(field_mutable_list:jax_triton.TritonAutotunedKernelCall.configs)
  return &_impl_.configs_;
}
inline const ::jax_triton::TritonAutotunedKernelCall_Config& TritonAutotunedKernelCall::_internal_configs(int index) const {
  return _impl_.configs_.Get(index);
}
inline const ::jax_triton::TritonAutotunedKernelCall_Config& TritonAutotunedKernelCall::configs(int index) const {
  // @@protoc_insertion_point(field_get:jax_triton.TritonAutotunedKernelCall.configs)
  return _internal_configs(index);
}
inline ::jax_triton::TritonAutotunedKernelCall_Config* TritonAutotunedKernelCall::_internal_add_configs() {
  return _impl_.configs_.Add();
}
inline ::jax_triton::TritonAutotunedKernelCall_Config* TritonAutotunedKernelCall::add_configs() {
  ::jax_triton::TritonAutotunedKernelCall_Config* _add = _internal_add_configs();
  // @@protoc_insertion_point(field_add:jax_triton.TritonAutotunedKernelCall.configs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jax_triton::TritonAutotunedKernelCall_Config >&
TritonAutotunedKernelCall::configs() const {
  // @@protoc_insertion_point(field_list:jax_triton.TritonAutotunedKernelCall.configs)
  return _impl_.configs_;
}

// repeated .jax_triton.TritonAutotunedKernelCall.InputOutputAlias input_output_aliases = 3;
inline int TritonAutotunedKernelCall::_internal_input_output_aliases_size() const {
  return _impl_.input_output_aliases_.size();
}
inline int TritonAutotunedKernelCall::input_output_aliases_size() const {
  return _internal_input_output_aliases_size();
}
inline void TritonAutotunedKernelCall::clear_input_output_aliases() {
  _impl_.input_output_aliases_.Clear();
}
inline ::jax_triton::TritonAutotunedKernelCall_InputOutputAlias* TritonAutotunedKernelCall::mutable_input_output_aliases(int index) {
  // @@protoc_insertion_point(field_mutable:jax_triton.TritonAutotunedKernelCall.input_output_aliases)
  return _impl_.input_output_aliases_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jax_triton::TritonAutotunedKernelCall_InputOutputAlias >*
TritonAutotunedKernelCall::mutable_input_output_aliases() {
  // @@protoc_insertion_point(field_mutable_list:jax_triton.TritonAutotunedKernelCall.input_output_aliases)
  return &_impl_.input_output_aliases_;
}
inline const ::jax_triton::TritonAutotunedKernelCall_InputOutputAlias& TritonAutotunedKernelCall::_internal_input_output_aliases(int index) const {
  return _impl_.input_output_aliases_.Get(index);
}
inline const ::jax_triton::TritonAutotunedKernelCall_InputOutputAlias& TritonAutotunedKernelCall::input_output_aliases(int index) const {
  // @@protoc_insertion_point(field_get:jax_triton.TritonAutotunedKernelCall.input_output_aliases)
  return _internal_input_output_aliases(index);
}
inline ::jax_triton::TritonAutotunedKernelCall_InputOutputAlias* TritonAutotunedKernelCall::_internal_add_input_output_aliases() {
  return _impl_.input_output_aliases_.Add();
}
inline ::jax_triton::TritonAutotunedKernelCall_InputOutputAlias* TritonAutotunedKernelCall::add_input_output_aliases() {
  ::jax_triton::TritonAutotunedKernelCall_InputOutputAlias* _add = _internal_add_input_output_aliases();
  // @@protoc_insertion_point(field_add:jax_triton.TritonAutotunedKernelCall.input_output_aliases)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jax_triton::TritonAutotunedKernelCall_InputOutputAlias >&
TritonAutotunedKernelCall::input_output_aliases() const {
  // @@protoc_insertion_point(field_list:jax_triton.TritonAutotunedKernelCall.input_output_aliases)
  return _impl_.input_output_aliases_;
}

// -------------------------------------------------------------------

// TritonAnyKernelCall

// .jax_triton.TritonKernelCall kernel_call = 1;
inline bool TritonAnyKernelCall::_internal_has_kernel_call() const {
  return value_case() == kKernelCall;
}
inline bool TritonAnyKernelCall::has_kernel_call() const {
  return _internal_has_kernel_call();
}
inline void TritonAnyKernelCall::set_has_kernel_call() {
  _impl_._oneof_case_[0] = kKernelCall;
}
inline void TritonAnyKernelCall::clear_kernel_call() {
  if (_internal_has_kernel_call()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.kernel_call_;
    }
    clear_has_value();
  }
}
inline ::jax_triton::TritonKernelCall* TritonAnyKernelCall::release_kernel_call() {
  // @@protoc_insertion_point(field_release:jax_triton.TritonAnyKernelCall.kernel_call)
  if (_internal_has_kernel_call()) {
    clear_has_value();
    ::jax_triton::TritonKernelCall* temp = _impl_.value_.kernel_call_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.kernel_call_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::jax_triton::TritonKernelCall& TritonAnyKernelCall::_internal_kernel_call() const {
  return _internal_has_kernel_call()
      ? *_impl_.value_.kernel_call_
      : reinterpret_cast< ::jax_triton::TritonKernelCall&>(::jax_triton::_TritonKernelCall_default_instance_);
}
inline const ::jax_triton::TritonKernelCall& TritonAnyKernelCall::kernel_call() const {
  // @@protoc_insertion_point(field_get:jax_triton.TritonAnyKernelCall.kernel_call)
  return _internal_kernel_call();
}
inline ::jax_triton::TritonKernelCall* TritonAnyKernelCall::unsafe_arena_release_kernel_call() {
  // @@protoc_insertion_point(field_unsafe_arena_release:jax_triton.TritonAnyKernelCall.kernel_call)
  if (_internal_has_kernel_call()) {
    clear_has_value();
    ::jax_triton::TritonKernelCall* temp = _impl_.value_.kernel_call_;
    _impl_.value_.kernel_call_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TritonAnyKernelCall::unsafe_arena_set_allocated_kernel_call(::jax_triton::TritonKernelCall* kernel_call) {
  clear_value();
  if (kernel_call) {
    set_has_kernel_call();
    _impl_.value_.kernel_call_ = kernel_call;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jax_triton.TritonAnyKernelCall.kernel_call)
}
inline ::jax_triton::TritonKernelCall* TritonAnyKernelCall::_internal_mutable_kernel_call() {
  if (!_internal_has_kernel_call()) {
    clear_value();
    set_has_kernel_call();
    _impl_.value_.kernel_call_ = CreateMaybeMessage< ::jax_triton::TritonKernelCall >(GetArenaForAllocation());
  }
  return _impl_.value_.kernel_call_;
}
inline ::jax_triton::TritonKernelCall* TritonAnyKernelCall::mutable_kernel_call() {
  ::jax_triton::TritonKernelCall* _msg = _internal_mutable_kernel_call();
  // @@protoc_insertion_point(field_mutable:jax_triton.TritonAnyKernelCall.kernel_call)
  return _msg;
}

// .jax_triton.TritonAutotunedKernelCall autotuned_kernel_call = 2;
inline bool TritonAnyKernelCall::_internal_has_autotuned_kernel_call() const {
  return value_case() == kAutotunedKernelCall;
}
inline bool TritonAnyKernelCall::has_autotuned_kernel_call() const {
  return _internal_has_autotuned_kernel_call();
}
inline void TritonAnyKernelCall::set_has_autotuned_kernel_call() {
  _impl_._oneof_case_[0] = kAutotunedKernelCall;
}
inline void TritonAnyKernelCall::clear_autotuned_kernel_call() {
  if (_internal_has_autotuned_kernel_call()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.autotuned_kernel_call_;
    }
    clear_has_value();
  }
}
inline ::jax_triton::TritonAutotunedKernelCall* TritonAnyKernelCall::release_autotuned_kernel_call() {
  // @@protoc_insertion_point(field_release:jax_triton.TritonAnyKernelCall.autotuned_kernel_call)
  if (_internal_has_autotuned_kernel_call()) {
    clear_has_value();
    ::jax_triton::TritonAutotunedKernelCall* temp = _impl_.value_.autotuned_kernel_call_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.autotuned_kernel_call_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::jax_triton::TritonAutotunedKernelCall& TritonAnyKernelCall::_internal_autotuned_kernel_call() const {
  return _internal_has_autotuned_kernel_call()
      ? *_impl_.value_.autotuned_kernel_call_
      : reinterpret_cast< ::jax_triton::TritonAutotunedKernelCall&>(::jax_triton::_TritonAutotunedKernelCall_default_instance_);
}
inline const ::jax_triton::TritonAutotunedKernelCall& TritonAnyKernelCall::autotuned_kernel_call() const {
  // @@protoc_insertion_point(field_get:jax_triton.TritonAnyKernelCall.autotuned_kernel_call)
  return _internal_autotuned_kernel_call();
}
inline ::jax_triton::TritonAutotunedKernelCall* TritonAnyKernelCall::unsafe_arena_release_autotuned_kernel_call() {
  // @@protoc_insertion_point(field_unsafe_arena_release:jax_triton.TritonAnyKernelCall.autotuned_kernel_call)
  if (_internal_has_autotuned_kernel_call()) {
    clear_has_value();
    ::jax_triton::TritonAutotunedKernelCall* temp = _impl_.value_.autotuned_kernel_call_;
    _impl_.value_.autotuned_kernel_call_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TritonAnyKernelCall::unsafe_arena_set_allocated_autotuned_kernel_call(::jax_triton::TritonAutotunedKernelCall* autotuned_kernel_call) {
  clear_value();
  if (autotuned_kernel_call) {
    set_has_autotuned_kernel_call();
    _impl_.value_.autotuned_kernel_call_ = autotuned_kernel_call;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jax_triton.TritonAnyKernelCall.autotuned_kernel_call)
}
inline ::jax_triton::TritonAutotunedKernelCall* TritonAnyKernelCall::_internal_mutable_autotuned_kernel_call() {
  if (!_internal_has_autotuned_kernel_call()) {
    clear_value();
    set_has_autotuned_kernel_call();
    _impl_.value_.autotuned_kernel_call_ = CreateMaybeMessage< ::jax_triton::TritonAutotunedKernelCall >(GetArenaForAllocation());
  }
  return _impl_.value_.autotuned_kernel_call_;
}
inline ::jax_triton::TritonAutotunedKernelCall* TritonAnyKernelCall::mutable_autotuned_kernel_call() {
  ::jax_triton::TritonAutotunedKernelCall* _msg = _internal_mutable_autotuned_kernel_call();
  // @@protoc_insertion_point(field_mutable:jax_triton.TritonAnyKernelCall.autotuned_kernel_call)
  return _msg;
}

// bytes metadata = 3;
inline void TritonAnyKernelCall::clear_metadata() {
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& TritonAnyKernelCall::metadata() const {
  // @@protoc_insertion_point(field_get:jax_triton.TritonAnyKernelCall.metadata)
  return _internal_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TritonAnyKernelCall::set_metadata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.metadata_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:jax_triton.TritonAnyKernelCall.metadata)
}
inline std::string* TritonAnyKernelCall::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:jax_triton.TritonAnyKernelCall.metadata)
  return _s;
}
inline const std::string& TritonAnyKernelCall::_internal_metadata() const {
  return _impl_.metadata_.Get();
}
inline void TritonAnyKernelCall::_internal_set_metadata(const std::string& value) {
  
  _impl_.metadata_.Set(value, GetArenaForAllocation());
}
inline std::string* TritonAnyKernelCall::_internal_mutable_metadata() {
  
  return _impl_.metadata_.Mutable(GetArenaForAllocation());
}
inline std::string* TritonAnyKernelCall::release_metadata() {
  // @@protoc_insertion_point(field_release:jax_triton.TritonAnyKernelCall.metadata)
  return _impl_.metadata_.Release();
}
inline void TritonAnyKernelCall::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  _impl_.metadata_.SetAllocated(metadata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metadata_.IsDefault()) {
    _impl_.metadata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:jax_triton.TritonAnyKernelCall.metadata)
}

// string name = 4;
inline void TritonAnyKernelCall::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& TritonAnyKernelCall::name() const {
  // @@protoc_insertion_point(field_get:jax_triton.TritonAnyKernelCall.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TritonAnyKernelCall::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:jax_triton.TritonAnyKernelCall.name)
}
inline std::string* TritonAnyKernelCall::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:jax_triton.TritonAnyKernelCall.name)
  return _s;
}
inline const std::string& TritonAnyKernelCall::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TritonAnyKernelCall::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TritonAnyKernelCall::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TritonAnyKernelCall::release_name() {
  // @@protoc_insertion_point(field_release:jax_triton.TritonAnyKernelCall.name)
  return _impl_.name_.Release();
}
inline void TritonAnyKernelCall::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:jax_triton.TritonAnyKernelCall.name)
}

inline bool TritonAnyKernelCall::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void TritonAnyKernelCall::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline TritonAnyKernelCall::ValueCase TritonAnyKernelCall::value_case() const {
  return TritonAnyKernelCall::ValueCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace jax_triton

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_triton_2eproto
