From 34095615d3d70848fef9cb12f86a03594086ac10 Mon Sep 17 00:00:00 2001
From: Daniel Fullmer <dfullmer@anduril.com>
Date: Sat, 18 Nov 2023 21:33:53 -0800
Subject: [PATCH 8/9] Lower priority of tegra-se crypto

It is far too flaky and slow to be useful.  I get approximately 150MB/s
when benchmarking encryption with AES-CBC using this module, while I get
over 2000MB/s with just the ARMv8 AES extensions.

Multiple crashes have been reported on the Jetson forums over the course
of years and there is still no resolution.

For example, when using dm-crypt, we see:
> [ 1058.429722] BUG: scheduling while atomic: swapper/6/0/0x00000100
which happens in tegra_se_aes_queue_req because it uses mutexes while
being called from the kcryptd tasklet.

Additionally, we see:
> [  329.008351] tegra-se-nvhost 15820000.se: Couldn't get free cmdbuf

We don't entirely disable this module because nvpmodel on certain
devices expects this driver to be loaded so it can set the SE frequency.
---
 nvidia/drivers/crypto/tegra-se-nvhost.c | 52 ++++++++++++-------------
 1 file changed, 26 insertions(+), 26 deletions(-)

diff --git a/nvidia/drivers/crypto/tegra-se-nvhost.c b/nvidia/drivers/crypto/tegra-se-nvhost.c
index 62e005da3dab..9b7c360a7048 100644
--- a/nvidia/drivers/crypto/tegra-se-nvhost.c
+++ b/nvidia/drivers/crypto/tegra-se-nvhost.c
@@ -6392,7 +6392,7 @@ static struct aead_alg aead_algs[] = {
 		.base = {
 			.cra_name	= "ccm(aes)",
 			.cra_driver_name = "ccm-aes-tegra",
-			.cra_priority	= 1000,
+			.cra_priority	= 1,
 			.cra_blocksize	= TEGRA_SE_AES_BLOCK_SIZE,
 			.cra_ctxsize	= sizeof(struct tegra_se_aes_ccm_ctx),
 			.cra_module	= THIS_MODULE,
@@ -6410,7 +6410,7 @@ static struct aead_alg aead_algs[] = {
 		.base = {
 			.cra_name	= "gcm(aes)",
 			.cra_driver_name = "gcm-aes-tegra",
-			.cra_priority	= 1000,
+			.cra_priority	= 1,
 			.cra_blocksize	= TEGRA_SE_AES_BLOCK_SIZE,
 			.cra_ctxsize	= sizeof(struct tegra_se_aes_gcm_ctx),
 			.cra_module	= THIS_MODULE,
@@ -6428,7 +6428,7 @@ static struct kpp_alg dh_algs[] = {
 	.base = {
 		.cra_name = "dh",
 		.cra_driver_name = "tegra-se-dh",
-		.cra_priority = 300,
+		.cra_priority = 1,
 		.cra_module = THIS_MODULE,
 		.cra_ctxsize = sizeof(struct tegra_se_dh_context),
 		}
@@ -6443,7 +6443,7 @@ static struct rng_alg rng_algs[] = {
 		.base = {
 			.cra_name = "rng_drbg",
 			.cra_driver_name = "rng_drbg-aes-tegra",
-			.cra_priority = 100,
+			.cra_priority = 1,
 			.cra_flags = CRYPTO_ALG_TYPE_RNG,
 			.cra_ctxsize = sizeof(struct tegra_se_rng_context),
 			.cra_module = THIS_MODULE,
@@ -6457,7 +6457,7 @@ static struct skcipher_alg aes_algs[] = {
 	{
 		.base.cra_name		= "xts(aes)",
 		.base.cra_driver_name	= "xts-aes-tegra",
-		.base.cra_priority	= 500,
+		.base.cra_priority	= 1,
 		.base.cra_flags		= CRYPTO_ALG_TYPE_SKCIPHER |
 					  CRYPTO_ALG_ASYNC,
 		.base.cra_blocksize	= TEGRA_SE_AES_BLOCK_SIZE,
@@ -6476,7 +6476,7 @@ static struct skcipher_alg aes_algs[] = {
 	{
 		.base.cra_name		= "cbc(aes)",
 		.base.cra_driver_name	= "cbc-aes-tegra",
-		.base.cra_priority	= 500,
+		.base.cra_priority	= 1,
 		.base.cra_flags		= CRYPTO_ALG_TYPE_SKCIPHER |
 					  CRYPTO_ALG_ASYNC,
 		.base.cra_blocksize	= TEGRA_SE_AES_BLOCK_SIZE,
@@ -6495,7 +6495,7 @@ static struct skcipher_alg aes_algs[] = {
 	{
 		.base.cra_name		= "ecb(aes)",
 		.base.cra_driver_name	= "ecb-aes-tegra",
-		.base.cra_priority	= 500,
+		.base.cra_priority	= 1,
 		.base.cra_flags		= CRYPTO_ALG_TYPE_SKCIPHER |
 					  CRYPTO_ALG_ASYNC,
 		.base.cra_blocksize	= TEGRA_SE_AES_BLOCK_SIZE,
@@ -6514,7 +6514,7 @@ static struct skcipher_alg aes_algs[] = {
 	{
 		.base.cra_name		= "ctr(aes)",
 		.base.cra_driver_name	= "ctr-aes-tegra",
-		.base.cra_priority	= 500,
+		.base.cra_priority	= 1,
 		.base.cra_flags		= CRYPTO_ALG_TYPE_SKCIPHER |
 					  CRYPTO_ALG_ASYNC,
 		.base.cra_blocksize	= TEGRA_SE_AES_BLOCK_SIZE,
@@ -6533,7 +6533,7 @@ static struct skcipher_alg aes_algs[] = {
 	{
 		.base.cra_name		= "ofb(aes)",
 		.base.cra_driver_name	= "ofb-aes-tegra",
-		.base.cra_priority	= 500,
+		.base.cra_priority	= 1,
 		.base.cra_flags		= CRYPTO_ALG_TYPE_SKCIPHER |
 					  CRYPTO_ALG_ASYNC,
 		.base.cra_blocksize	= TEGRA_SE_AES_BLOCK_SIZE,
@@ -6566,7 +6566,7 @@ static struct ahash_alg hash_algs[] = {
 		.halg.base = {
 			.cra_name = "cmac(aes)",
 			.cra_driver_name = "tegra-se-cmac(aes)",
-			.cra_priority = 500,
+			.cra_priority = 1,
 			.cra_flags = CRYPTO_ALG_TYPE_AHASH,
 			.cra_blocksize = TEGRA_SE_AES_BLOCK_SIZE,
 			.cra_ctxsize = sizeof(struct tegra_se_aes_cmac_context),
@@ -6588,7 +6588,7 @@ static struct ahash_alg hash_algs[] = {
 		.halg.base = {
 			.cra_name = "sha1",
 			.cra_driver_name = "tegra-se-sha1",
-			.cra_priority = 300,
+			.cra_priority = 1,
 			.cra_flags = CRYPTO_ALG_TYPE_AHASH,
 			.cra_blocksize = SHA1_BLOCK_SIZE,
 			.cra_ctxsize = sizeof(struct tegra_se_sha_context),
@@ -6610,7 +6610,7 @@ static struct ahash_alg hash_algs[] = {
 		.halg.base = {
 			.cra_name = "sha224",
 			.cra_driver_name = "tegra-se-sha224",
-			.cra_priority = 300,
+			.cra_priority = 1,
 			.cra_flags = CRYPTO_ALG_TYPE_AHASH,
 			.cra_blocksize = SHA224_BLOCK_SIZE,
 			.cra_ctxsize = sizeof(struct tegra_se_sha_context),
@@ -6632,7 +6632,7 @@ static struct ahash_alg hash_algs[] = {
 		.halg.base = {
 			.cra_name = "sha256",
 			.cra_driver_name = "tegra-se-sha256",
-			.cra_priority = 300,
+			.cra_priority = 1,
 			.cra_flags = CRYPTO_ALG_TYPE_AHASH,
 			.cra_blocksize = SHA256_BLOCK_SIZE,
 			.cra_ctxsize = sizeof(struct tegra_se_sha_context),
@@ -6654,7 +6654,7 @@ static struct ahash_alg hash_algs[] = {
 		.halg.base = {
 			.cra_name = "sha384",
 			.cra_driver_name = "tegra-se-sha384",
-			.cra_priority = 300,
+			.cra_priority = 1,
 			.cra_flags = CRYPTO_ALG_TYPE_AHASH,
 			.cra_blocksize = SHA384_BLOCK_SIZE,
 			.cra_ctxsize = sizeof(struct tegra_se_sha_context),
@@ -6676,7 +6676,7 @@ static struct ahash_alg hash_algs[] = {
 		.halg.base = {
 			.cra_name = "sha512",
 			.cra_driver_name = "tegra-se-sha512",
-			.cra_priority = 300,
+			.cra_priority = 1,
 			.cra_flags = CRYPTO_ALG_TYPE_AHASH,
 			.cra_blocksize = SHA512_BLOCK_SIZE,
 			.cra_ctxsize = sizeof(struct tegra_se_sha_context),
@@ -6698,7 +6698,7 @@ static struct ahash_alg hash_algs[] = {
 		.halg.base = {
 			.cra_name = "sha3-224",
 			.cra_driver_name = "tegra-se-sha3-224",
-			.cra_priority = 300,
+			.cra_priority = 1,
 			.cra_flags = CRYPTO_ALG_TYPE_AHASH,
 			.cra_blocksize = SHA3_224_BLOCK_SIZE,
 			.cra_ctxsize = sizeof(struct tegra_se_sha_context),
@@ -6720,7 +6720,7 @@ static struct ahash_alg hash_algs[] = {
 		.halg.base = {
 			.cra_name = "sha3-256",
 			.cra_driver_name = "tegra-se-sha3-256",
-			.cra_priority = 300,
+			.cra_priority = 1,
 			.cra_flags = CRYPTO_ALG_TYPE_AHASH,
 			.cra_blocksize = SHA3_256_BLOCK_SIZE,
 			.cra_ctxsize = sizeof(struct tegra_se_sha_context),
@@ -6742,7 +6742,7 @@ static struct ahash_alg hash_algs[] = {
 		.halg.base = {
 			.cra_name = "sha3-384",
 			.cra_driver_name = "tegra-se-sha3-384",
-			.cra_priority = 300,
+			.cra_priority = 1,
 			.cra_flags = CRYPTO_ALG_TYPE_AHASH,
 			.cra_blocksize = SHA3_384_BLOCK_SIZE,
 			.cra_ctxsize = sizeof(struct tegra_se_sha_context),
@@ -6764,7 +6764,7 @@ static struct ahash_alg hash_algs[] = {
 		.halg.base = {
 			.cra_name = "sha3-512",
 			.cra_driver_name = "tegra-se-sha3-512",
-			.cra_priority = 300,
+			.cra_priority = 1,
 			.cra_flags = CRYPTO_ALG_TYPE_AHASH,
 			.cra_blocksize = SHA3_512_BLOCK_SIZE,
 			.cra_ctxsize = sizeof(struct tegra_se_sha_context),
@@ -6786,7 +6786,7 @@ static struct ahash_alg hash_algs[] = {
 		.halg.base = {
 			.cra_name = "shake128",
 			.cra_driver_name = "tegra-se-shake128",
-			.cra_priority = 300,
+			.cra_priority = 1,
 			.cra_flags = CRYPTO_ALG_TYPE_AHASH,
 			.cra_blocksize = SHA3_512_BLOCK_SIZE,
 			.cra_ctxsize = sizeof(struct tegra_se_sha_context),
@@ -6808,7 +6808,7 @@ static struct ahash_alg hash_algs[] = {
 		.halg.base = {
 			.cra_name = "shake256",
 			.cra_driver_name = "tegra-se-shake256",
-			.cra_priority = 300,
+			.cra_priority = 1,
 			.cra_flags = CRYPTO_ALG_TYPE_AHASH,
 			.cra_blocksize = SHA3_512_BLOCK_SIZE,
 			.cra_ctxsize = sizeof(struct tegra_se_sha_context),
@@ -6831,7 +6831,7 @@ static struct ahash_alg hash_algs[] = {
 		.halg.base = {
 			.cra_name = "hmac(sha224)",
 			.cra_driver_name = "tegra-se-hmac-sha224",
-			.cra_priority = 500,
+			.cra_priority = 1,
 			.cra_flags = CRYPTO_ALG_TYPE_AHASH,
 			.cra_blocksize = SHA224_BLOCK_SIZE,
 			.cra_ctxsize = sizeof(struct tegra_se_sha_context),
@@ -6854,7 +6854,7 @@ static struct ahash_alg hash_algs[] = {
 		.halg.base = {
 			.cra_name = "hmac(sha256)",
 			.cra_driver_name = "tegra-se-hmac-sha256",
-			.cra_priority = 500,
+			.cra_priority = 1,
 			.cra_flags = CRYPTO_ALG_TYPE_AHASH,
 			.cra_blocksize = SHA256_BLOCK_SIZE,
 			.cra_ctxsize = sizeof(struct tegra_se_sha_context),
@@ -6877,7 +6877,7 @@ static struct ahash_alg hash_algs[] = {
 		.halg.base = {
 			.cra_name = "hmac(sha384)",
 			.cra_driver_name = "tegra-se-hmac-sha384",
-			.cra_priority = 500,
+			.cra_priority = 1,
 			.cra_flags = CRYPTO_ALG_TYPE_AHASH,
 			.cra_blocksize = SHA384_BLOCK_SIZE,
 			.cra_ctxsize = sizeof(struct tegra_se_sha_context),
@@ -6900,7 +6900,7 @@ static struct ahash_alg hash_algs[] = {
 		.halg.base = {
 			.cra_name = "hmac(sha512)",
 			.cra_driver_name = "tegra-se-hmac-sha512",
-			.cra_priority = 500,
+			.cra_priority = 1,
 			.cra_flags = CRYPTO_ALG_TYPE_AHASH,
 			.cra_blocksize = SHA512_BLOCK_SIZE,
 			.cra_ctxsize = sizeof(struct tegra_se_sha_context),
@@ -6924,7 +6924,7 @@ static struct akcipher_alg rsa_alg = {
 	.base = {
 		.cra_name = "rsa-pka0",
 		.cra_driver_name = "tegra-se-pka0-rsa",
-		.cra_priority = 300,
+		.cra_priority = 1,
 		.cra_ctxsize = sizeof(struct tegra_se_aes_rsa_context),
 		.cra_module = THIS_MODULE,
 	}
-- 
2.42.0

